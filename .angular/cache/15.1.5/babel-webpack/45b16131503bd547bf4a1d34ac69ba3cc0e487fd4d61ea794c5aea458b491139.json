{"ast":null,"code":"import { createSelector } from '@ngrx/store';\nimport { isDevMode } from '@angular/core';\nfunction getInitialEntityState() {\n  return {\n    ids: [],\n    entities: {}\n  };\n}\nfunction createInitialStateFactory() {\n  function getInitialState(additionalState = {}) {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n  return {\n    getInitialState\n  };\n}\nfunction createSelectorsFactory() {\n  function getSelectors(selectState) {\n    const selectIds = state => state.ids;\n    const selectEntities = state => state.entities;\n    const selectAll = createSelector(selectIds, selectEntities, (ids, entities) => ids.map(id => entities[id]));\n    const selectTotal = createSelector(selectIds, ids => ids.length);\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal\n      };\n    }\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: createSelector(selectState, selectEntities),\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal)\n    };\n  }\n  return {\n    getSelectors\n  };\n}\nvar DidMutate;\n(function (DidMutate) {\n  DidMutate[DidMutate[\"EntitiesOnly\"] = 0] = \"EntitiesOnly\";\n  DidMutate[DidMutate[\"Both\"] = 1] = \"Both\";\n  DidMutate[DidMutate[\"None\"] = 2] = \"None\";\n})(DidMutate || (DidMutate = {}));\nfunction createStateOperator(mutator) {\n  return function operation(arg, state) {\n    const clonedEntityState = {\n      ids: [...state.ids],\n      entities: {\n        ...state.entities\n      }\n    };\n    const didMutate = mutator(arg, clonedEntityState);\n    if (didMutate === DidMutate.Both) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n    if (didMutate === DidMutate.EntitiesOnly) {\n      return {\n        ...state,\n        entities: clonedEntityState.entities\n      };\n    }\n    return state;\n  };\n}\nfunction selectIdValue(entity, selectId) {\n  const key = selectId(entity);\n  if (isDevMode() && key === undefined) {\n    console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n  }\n  return key;\n}\nfunction createUnsortedStateAdapter(selectId) {\n  function addOneMutably(entity, state) {\n    const key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return DidMutate.None;\n    }\n    state.ids.push(key);\n    state.entities[key] = entity;\n    return DidMutate.Both;\n  }\n  function addManyMutably(entities, state) {\n    let didMutate = false;\n    for (const entity of entities) {\n      didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n    }\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n  function setAllMutably(entities, state) {\n    state.ids = [];\n    state.entities = {};\n    addManyMutably(entities, state);\n    return DidMutate.Both;\n  }\n  function setOneMutably(entity, state) {\n    const key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      state.entities[key] = entity;\n      return DidMutate.EntitiesOnly;\n    }\n    state.ids.push(key);\n    state.entities[key] = entity;\n    return DidMutate.Both;\n  }\n  function setManyMutably(entities, state) {\n    const didMutateSetOne = entities.map(entity => setOneMutably(entity, state));\n    switch (true) {\n      case didMutateSetOne.some(didMutate => didMutate === DidMutate.Both):\n        return DidMutate.Both;\n      case didMutateSetOne.some(didMutate => didMutate === DidMutate.EntitiesOnly):\n        return DidMutate.EntitiesOnly;\n      default:\n        return DidMutate.None;\n    }\n  }\n  function removeOneMutably(key, state) {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keysOrPredicate, state) {\n    const keys = keysOrPredicate instanceof Array ? keysOrPredicate : state.ids.filter(key => keysOrPredicate(state.entities[key]));\n    const didMutate = keys.filter(key => key in state.entities).map(key => delete state.entities[key]).length > 0;\n    if (didMutate) {\n      state.ids = state.ids.filter(id => id in state.entities);\n    }\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n  function removeAll(state) {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys, update, state) {\n    const original = state.entities[update.id];\n    const updated = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    const hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n    state.entities[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    const newKeys = {};\n    updates = updates.filter(update => update.id in state.entities);\n    const didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      const didMutateIds = updates.filter(update => takeNewKey(newKeys, update, state)).length > 0;\n      if (didMutateIds) {\n        state.ids = state.ids.map(id => newKeys[id] || id);\n        return DidMutate.Both;\n      } else {\n        return DidMutate.EntitiesOnly;\n      }\n    }\n    return DidMutate.None;\n  }\n  function mapMutably(map, state) {\n    const changes = state.ids.reduce((changes, id) => {\n      const change = map(state.entities[id]);\n      if (change !== state.entities[id]) {\n        changes.push({\n          id,\n          changes: change\n        });\n      }\n      return changes;\n    }, []);\n    const updates = changes.filter(({\n      id\n    }) => id in state.entities);\n    return updateManyMutably(updates, state);\n  }\n  function mapOneMutably({\n    map,\n    id\n  }, state) {\n    const entity = state.entities[id];\n    if (!entity) {\n      return DidMutate.None;\n    }\n    const updatedEntity = map(entity);\n    return updateOneMutably({\n      id: id,\n      changes: updatedEntity\n    }, state);\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(entities, state) {\n    const added = [];\n    const updated = [];\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({\n          id,\n          changes: entity\n        });\n      } else {\n        added.push(entity);\n      }\n    }\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n    switch (true) {\n      case didMutateByAdded === DidMutate.None && didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both || didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n    map: createStateOperator(mapMutably),\n    mapOne: createStateOperator(mapOneMutably)\n  };\n}\nfunction createSortedStateAdapter(selectId, sort) {\n  const {\n    removeOne,\n    removeMany,\n    removeAll\n  } = createUnsortedStateAdapter(selectId);\n  function addOneMutably(entity, state) {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newModels, state) {\n    const models = newModels.filter(model => !(selectIdValue(model, selectId) in state.entities));\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      merge(models, state);\n      return DidMutate.Both;\n    }\n  }\n  function setAllMutably(models, state) {\n    state.entities = {};\n    state.ids = [];\n    addManyMutably(models, state);\n    return DidMutate.Both;\n  }\n  function setOneMutably(entity, state) {\n    const id = selectIdValue(entity, selectId);\n    if (id in state.entities) {\n      state.ids = state.ids.filter(val => val !== id);\n      merge([entity], state);\n      return DidMutate.Both;\n    } else {\n      return addOneMutably(entity, state);\n    }\n  }\n  function setManyMutably(entities, state) {\n    const didMutateSetOne = entities.map(entity => setOneMutably(entity, state));\n    switch (true) {\n      case didMutateSetOne.some(didMutate => didMutate === DidMutate.Both):\n        return DidMutate.Both;\n      case didMutateSetOne.some(didMutate => didMutate === DidMutate.EntitiesOnly):\n        return DidMutate.EntitiesOnly;\n      default:\n        return DidMutate.None;\n    }\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function takeUpdatedModel(models, update, state) {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n    const original = state.entities[update.id];\n    const updated = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    delete state.entities[update.id];\n    models.push(updated);\n    return newKey !== update.id;\n  }\n  function updateManyMutably(updates, state) {\n    const models = [];\n    const didMutateIds = updates.filter(update => takeUpdatedModel(models, update, state)).length > 0;\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      const originalIds = state.ids;\n      const updatedIndexes = [];\n      state.ids = state.ids.filter((id, index) => {\n        if (id in state.entities) {\n          return true;\n        } else {\n          updatedIndexes.push(index);\n          return false;\n        }\n      });\n      merge(models, state);\n      if (!didMutateIds && updatedIndexes.every(i => state.ids[i] === originalIds[i])) {\n        return DidMutate.EntitiesOnly;\n      } else {\n        return DidMutate.Both;\n      }\n    }\n  }\n  function mapMutably(updatesOrMap, state) {\n    const updates = state.ids.reduce((changes, id) => {\n      const change = updatesOrMap(state.entities[id]);\n      if (change !== state.entities[id]) {\n        changes.push({\n          id,\n          changes: change\n        });\n      }\n      return changes;\n    }, []);\n    return updateManyMutably(updates, state);\n  }\n  function mapOneMutably({\n    map,\n    id\n  }, state) {\n    const entity = state.entities[id];\n    if (!entity) {\n      return DidMutate.None;\n    }\n    const updatedEntity = map(entity);\n    return updateOneMutably({\n      id: id,\n      changes: updatedEntity\n    }, state);\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(entities, state) {\n    const added = [];\n    const updated = [];\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({\n          id,\n          changes: entity\n        });\n      } else {\n        added.push(entity);\n      }\n    }\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n    switch (true) {\n      case didMutateByAdded === DidMutate.None && didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both || didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n  function merge(models, state) {\n    models.sort(sort);\n    const ids = [];\n    let i = 0;\n    let j = 0;\n    while (i < models.length && j < state.ids.length) {\n      const model = models[i];\n      const modelId = selectIdValue(model, selectId);\n      const entityId = state.ids[j];\n      const entity = state.entities[entityId];\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId);\n        i++;\n      } else {\n        ids.push(entityId);\n        j++;\n      }\n    }\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId));\n    } else {\n      state.ids = ids.concat(state.ids.slice(j));\n    }\n    models.forEach((model, i) => {\n      state.entities[selectId(model)] = model;\n    });\n  }\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    map: createStateOperator(mapMutably),\n    mapOne: createStateOperator(mapOneMutably)\n  };\n}\nfunction createEntityAdapter(options = {}) {\n  var _options$selectId, _options$sortComparer;\n  const {\n    selectId,\n    sortComparer\n  } = {\n    selectId: (_options$selectId = options.selectId) !== null && _options$selectId !== void 0 ? _options$selectId : entity => entity.id,\n    sortComparer: (_options$sortComparer = options.sortComparer) !== null && _options$sortComparer !== void 0 ? _options$sortComparer : false\n  };\n  const stateFactory = createInitialStateFactory();\n  const selectorsFactory = createSelectorsFactory();\n  const stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter\n  };\n}\nclass Dictionary {}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Dictionary, createEntityAdapter };\n//# sourceMappingURL=ngrx-entity.mjs.map","map":{"version":3,"names":["createSelector","isDevMode","getInitialEntityState","ids","entities","createInitialStateFactory","getInitialState","additionalState","Object","assign","createSelectorsFactory","getSelectors","selectState","selectIds","state","selectEntities","selectAll","map","id","selectTotal","length","DidMutate","createStateOperator","mutator","operation","arg","clonedEntityState","didMutate","Both","EntitiesOnly","selectIdValue","entity","selectId","key","undefined","console","warn","toString","createUnsortedStateAdapter","addOneMutably","None","push","addManyMutably","setAllMutably","setOneMutably","setManyMutably","didMutateSetOne","some","removeOneMutably","removeManyMutably","keysOrPredicate","keys","Array","filter","removeAll","takeNewKey","update","original","updated","changes","newKey","hasNewKey","updateOneMutably","updateManyMutably","updates","newKeys","didMutateEntities","didMutateIds","mapMutably","reduce","change","mapOneMutably","updatedEntity","upsertOneMutably","upsertManyMutably","added","didMutateByUpdated","didMutateByAdded","addOne","addMany","setAll","setOne","setMany","updateOne","updateMany","upsertOne","upsertMany","removeOne","removeMany","mapOne","createSortedStateAdapter","sort","newModels","models","model","merge","val","takeUpdatedModel","originalIds","updatedIndexes","index","every","i","updatesOrMap","j","modelId","entityId","concat","slice","forEach","createEntityAdapter","options","sortComparer","stateFactory","selectorsFactory","stateAdapter","Dictionary"],"sources":["C:/Work/Assignment/ngx-Demo/node_modules/@ngrx/entity/fesm2020/ngrx-entity.mjs"],"sourcesContent":["import { createSelector } from '@ngrx/store';\nimport { isDevMode } from '@angular/core';\n\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {},\n    };\n}\nfunction createInitialStateFactory() {\n    function getInitialState(additionalState = {}) {\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return { getInitialState };\n}\n\nfunction createSelectorsFactory() {\n    function getSelectors(selectState) {\n        const selectIds = (state) => state.ids;\n        const selectEntities = (state) => state.entities;\n        const selectAll = createSelector(selectIds, selectEntities, (ids, entities) => ids.map((id) => entities[id]));\n        const selectTotal = createSelector(selectIds, (ids) => ids.length);\n        if (!selectState) {\n            return {\n                selectIds,\n                selectEntities,\n                selectAll,\n                selectTotal,\n            };\n        }\n        return {\n            selectIds: createSelector(selectState, selectIds),\n            selectEntities: createSelector(selectState, selectEntities),\n            selectAll: createSelector(selectState, selectAll),\n            selectTotal: createSelector(selectState, selectTotal),\n        };\n    }\n    return { getSelectors };\n}\n\nvar DidMutate;\n(function (DidMutate) {\n    DidMutate[DidMutate[\"EntitiesOnly\"] = 0] = \"EntitiesOnly\";\n    DidMutate[DidMutate[\"Both\"] = 1] = \"Both\";\n    DidMutate[DidMutate[\"None\"] = 2] = \"None\";\n})(DidMutate || (DidMutate = {}));\nfunction createStateOperator(mutator) {\n    return function operation(arg, state) {\n        const clonedEntityState = {\n            ids: [...state.ids],\n            entities: { ...state.entities },\n        };\n        const didMutate = mutator(arg, clonedEntityState);\n        if (didMutate === DidMutate.Both) {\n            return Object.assign({}, state, clonedEntityState);\n        }\n        if (didMutate === DidMutate.EntitiesOnly) {\n            return {\n                ...state,\n                entities: clonedEntityState.entities,\n            };\n        }\n        return state;\n    };\n}\n\nfunction selectIdValue(entity, selectId) {\n    const key = selectId(entity);\n    if (isDevMode() && key === undefined) {\n        console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n    }\n    return key;\n}\n\nfunction createUnsortedStateAdapter(selectId) {\n    function addOneMutably(entity, state) {\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return DidMutate.None;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    function addManyMutably(entities, state) {\n        let didMutate = false;\n        for (const entity of entities) {\n            didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    function setAllMutably(entities, state) {\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(entities, state);\n        return DidMutate.Both;\n    }\n    function setOneMutably(entity, state) {\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            state.entities[key] = entity;\n            return DidMutate.EntitiesOnly;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    function setManyMutably(entities, state) {\n        const didMutateSetOne = entities.map((entity) => setOneMutably(entity, state));\n        switch (true) {\n            case didMutateSetOne.some((didMutate) => didMutate === DidMutate.Both):\n                return DidMutate.Both;\n            case didMutateSetOne.some((didMutate) => didMutate === DidMutate.EntitiesOnly):\n                return DidMutate.EntitiesOnly;\n            default:\n                return DidMutate.None;\n        }\n    }\n    function removeOneMutably(key, state) {\n        return removeManyMutably([key], state);\n    }\n    function removeManyMutably(keysOrPredicate, state) {\n        const keys = keysOrPredicate instanceof Array\n            ? keysOrPredicate\n            : state.ids.filter((key) => keysOrPredicate(state.entities[key]));\n        const didMutate = keys\n            .filter((key) => key in state.entities)\n            .map((key) => delete state.entities[key]).length > 0;\n        if (didMutate) {\n            state.ids = state.ids.filter((id) => id in state.entities);\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    function removeAll(state) {\n        return Object.assign({}, state, {\n            ids: [],\n            entities: {},\n        });\n    }\n    function takeNewKey(keys, update, state) {\n        const original = state.entities[update.id];\n        const updated = Object.assign({}, original, update.changes);\n        const newKey = selectIdValue(updated, selectId);\n        const hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    function updateManyMutably(updates, state) {\n        const newKeys = {};\n        updates = updates.filter((update) => update.id in state.entities);\n        const didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            const didMutateIds = updates.filter((update) => takeNewKey(newKeys, update, state)).length >\n                0;\n            if (didMutateIds) {\n                state.ids = state.ids.map((id) => newKeys[id] || id);\n                return DidMutate.Both;\n            }\n            else {\n                return DidMutate.EntitiesOnly;\n            }\n        }\n        return DidMutate.None;\n    }\n    function mapMutably(map, state) {\n        const changes = state.ids.reduce((changes, id) => {\n            const change = map(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }, []);\n        const updates = changes.filter(({ id }) => id in state.entities);\n        return updateManyMutably(updates, state);\n    }\n    function mapOneMutably({ map, id }, state) {\n        const entity = state.entities[id];\n        if (!entity) {\n            return DidMutate.None;\n        }\n        const updatedEntity = map(entity);\n        return updateOneMutably({\n            id: id,\n            changes: updatedEntity,\n        }, state);\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    function upsertManyMutably(entities, state) {\n        const added = [];\n        const updated = [];\n        for (const entity of entities) {\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    return {\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        setMany: createStateOperator(setManyMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably),\n        map: createStateOperator(mapMutably),\n        mapOne: createStateOperator(mapOneMutably),\n    };\n}\n\nfunction createSortedStateAdapter(selectId, sort) {\n    const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId);\n    function addOneMutably(entity, state) {\n        return addManyMutably([entity], state);\n    }\n    function addManyMutably(newModels, state) {\n        const models = newModels.filter((model) => !(selectIdValue(model, selectId) in state.entities));\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            merge(models, state);\n            return DidMutate.Both;\n        }\n    }\n    function setAllMutably(models, state) {\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(models, state);\n        return DidMutate.Both;\n    }\n    function setOneMutably(entity, state) {\n        const id = selectIdValue(entity, selectId);\n        if (id in state.entities) {\n            state.ids = state.ids.filter((val) => val !== id);\n            merge([entity], state);\n            return DidMutate.Both;\n        }\n        else {\n            return addOneMutably(entity, state);\n        }\n    }\n    function setManyMutably(entities, state) {\n        const didMutateSetOne = entities.map((entity) => setOneMutably(entity, state));\n        switch (true) {\n            case didMutateSetOne.some((didMutate) => didMutate === DidMutate.Both):\n                return DidMutate.Both;\n            case didMutateSetOne.some((didMutate) => didMutate === DidMutate.EntitiesOnly):\n                return DidMutate.EntitiesOnly;\n            default:\n                return DidMutate.None;\n        }\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    function takeUpdatedModel(models, update, state) {\n        if (!(update.id in state.entities)) {\n            return false;\n        }\n        const original = state.entities[update.id];\n        const updated = Object.assign({}, original, update.changes);\n        const newKey = selectIdValue(updated, selectId);\n        delete state.entities[update.id];\n        models.push(updated);\n        return newKey !== update.id;\n    }\n    function updateManyMutably(updates, state) {\n        const models = [];\n        const didMutateIds = updates.filter((update) => takeUpdatedModel(models, update, state))\n            .length > 0;\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            const originalIds = state.ids;\n            const updatedIndexes = [];\n            state.ids = state.ids.filter((id, index) => {\n                if (id in state.entities) {\n                    return true;\n                }\n                else {\n                    updatedIndexes.push(index);\n                    return false;\n                }\n            });\n            merge(models, state);\n            if (!didMutateIds &&\n                updatedIndexes.every((i) => state.ids[i] === originalIds[i])) {\n                return DidMutate.EntitiesOnly;\n            }\n            else {\n                return DidMutate.Both;\n            }\n        }\n    }\n    function mapMutably(updatesOrMap, state) {\n        const updates = state.ids.reduce((changes, id) => {\n            const change = updatesOrMap(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }, []);\n        return updateManyMutably(updates, state);\n    }\n    function mapOneMutably({ map, id }, state) {\n        const entity = state.entities[id];\n        if (!entity) {\n            return DidMutate.None;\n        }\n        const updatedEntity = map(entity);\n        return updateOneMutably({\n            id: id,\n            changes: updatedEntity,\n        }, state);\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    function upsertManyMutably(entities, state) {\n        const added = [];\n        const updated = [];\n        for (const entity of entities) {\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    function merge(models, state) {\n        models.sort(sort);\n        const ids = [];\n        let i = 0;\n        let j = 0;\n        while (i < models.length && j < state.ids.length) {\n            const model = models[i];\n            const modelId = selectIdValue(model, selectId);\n            const entityId = state.ids[j];\n            const entity = state.entities[entityId];\n            if (sort(model, entity) <= 0) {\n                ids.push(modelId);\n                i++;\n            }\n            else {\n                ids.push(entityId);\n                j++;\n            }\n        }\n        if (i < models.length) {\n            state.ids = ids.concat(models.slice(i).map(selectId));\n        }\n        else {\n            state.ids = ids.concat(state.ids.slice(j));\n        }\n        models.forEach((model, i) => {\n            state.entities[selectId(model)] = model;\n        });\n    }\n    return {\n        removeOne,\n        removeMany,\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        setMany: createStateOperator(setManyMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        map: createStateOperator(mapMutably),\n        mapOne: createStateOperator(mapOneMutably),\n    };\n}\n\nfunction createEntityAdapter(options = {}) {\n    const { selectId, sortComparer } = {\n        selectId: options.selectId ?? ((entity) => entity.id),\n        sortComparer: options.sortComparer ?? false,\n    };\n    const stateFactory = createInitialStateFactory();\n    const selectorsFactory = createSelectorsFactory();\n    const stateAdapter = sortComparer\n        ? createSortedStateAdapter(selectId, sortComparer)\n        : createUnsortedStateAdapter(selectId);\n    return {\n        selectId,\n        sortComparer,\n        ...stateFactory,\n        ...selectorsFactory,\n        ...stateAdapter,\n    };\n}\n\nclass Dictionary {\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Dictionary, createEntityAdapter };\n//# sourceMappingURL=ngrx-entity.mjs.map\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,aAAa;AAC5C,SAASC,SAAS,QAAQ,eAAe;AAEzC,SAASC,qBAAqB,GAAG;EAC7B,OAAO;IACHC,GAAG,EAAE,EAAE;IACPC,QAAQ,EAAE,CAAC;EACf,CAAC;AACL;AACA,SAASC,yBAAyB,GAAG;EACjC,SAASC,eAAe,CAACC,eAAe,GAAG,CAAC,CAAC,EAAE;IAC3C,OAAOC,MAAM,CAACC,MAAM,CAACP,qBAAqB,EAAE,EAAEK,eAAe,CAAC;EAClE;EACA,OAAO;IAAED;EAAgB,CAAC;AAC9B;AAEA,SAASI,sBAAsB,GAAG;EAC9B,SAASC,YAAY,CAACC,WAAW,EAAE;IAC/B,MAAMC,SAAS,GAAIC,KAAK,IAAKA,KAAK,CAACX,GAAG;IACtC,MAAMY,cAAc,GAAID,KAAK,IAAKA,KAAK,CAACV,QAAQ;IAChD,MAAMY,SAAS,GAAGhB,cAAc,CAACa,SAAS,EAAEE,cAAc,EAAE,CAACZ,GAAG,EAAEC,QAAQ,KAAKD,GAAG,CAACc,GAAG,CAAEC,EAAE,IAAKd,QAAQ,CAACc,EAAE,CAAC,CAAC,CAAC;IAC7G,MAAMC,WAAW,GAAGnB,cAAc,CAACa,SAAS,EAAGV,GAAG,IAAKA,GAAG,CAACiB,MAAM,CAAC;IAClE,IAAI,CAACR,WAAW,EAAE;MACd,OAAO;QACHC,SAAS;QACTE,cAAc;QACdC,SAAS;QACTG;MACJ,CAAC;IACL;IACA,OAAO;MACHN,SAAS,EAAEb,cAAc,CAACY,WAAW,EAAEC,SAAS,CAAC;MACjDE,cAAc,EAAEf,cAAc,CAACY,WAAW,EAAEG,cAAc,CAAC;MAC3DC,SAAS,EAAEhB,cAAc,CAACY,WAAW,EAAEI,SAAS,CAAC;MACjDG,WAAW,EAAEnB,cAAc,CAACY,WAAW,EAAEO,WAAW;IACxD,CAAC;EACL;EACA,OAAO;IAAER;EAAa,CAAC;AAC3B;AAEA,IAAIU,SAAS;AACb,CAAC,UAAUA,SAAS,EAAE;EAClBA,SAAS,CAACA,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc;EACzDA,SAAS,CAACA,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACzCA,SAAS,CAACA,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;AAC7C,CAAC,EAAEA,SAAS,KAAKA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;AACjC,SAASC,mBAAmB,CAACC,OAAO,EAAE;EAClC,OAAO,SAASC,SAAS,CAACC,GAAG,EAAEX,KAAK,EAAE;IAClC,MAAMY,iBAAiB,GAAG;MACtBvB,GAAG,EAAE,CAAC,GAAGW,KAAK,CAACX,GAAG,CAAC;MACnBC,QAAQ,EAAE;QAAE,GAAGU,KAAK,CAACV;MAAS;IAClC,CAAC;IACD,MAAMuB,SAAS,GAAGJ,OAAO,CAACE,GAAG,EAAEC,iBAAiB,CAAC;IACjD,IAAIC,SAAS,KAAKN,SAAS,CAACO,IAAI,EAAE;MAC9B,OAAOpB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEK,KAAK,EAAEY,iBAAiB,CAAC;IACtD;IACA,IAAIC,SAAS,KAAKN,SAAS,CAACQ,YAAY,EAAE;MACtC,OAAO;QACH,GAAGf,KAAK;QACRV,QAAQ,EAAEsB,iBAAiB,CAACtB;MAChC,CAAC;IACL;IACA,OAAOU,KAAK;EAChB,CAAC;AACL;AAEA,SAASgB,aAAa,CAACC,MAAM,EAAEC,QAAQ,EAAE;EACrC,MAAMC,GAAG,GAAGD,QAAQ,CAACD,MAAM,CAAC;EAC5B,IAAI9B,SAAS,EAAE,IAAIgC,GAAG,KAAKC,SAAS,EAAE;IAClCC,OAAO,CAACC,IAAI,CAAC,sFAAsF,EAAE,iEAAiE,EAAE,6BAA6B,EAAEL,MAAM,EAAE,gCAAgC,EAAEC,QAAQ,CAACK,QAAQ,EAAE,CAAC;EACzQ;EACA,OAAOJ,GAAG;AACd;AAEA,SAASK,0BAA0B,CAACN,QAAQ,EAAE;EAC1C,SAASO,aAAa,CAACR,MAAM,EAAEjB,KAAK,EAAE;IAClC,MAAMmB,GAAG,GAAGH,aAAa,CAACC,MAAM,EAAEC,QAAQ,CAAC;IAC3C,IAAIC,GAAG,IAAInB,KAAK,CAACV,QAAQ,EAAE;MACvB,OAAOiB,SAAS,CAACmB,IAAI;IACzB;IACA1B,KAAK,CAACX,GAAG,CAACsC,IAAI,CAACR,GAAG,CAAC;IACnBnB,KAAK,CAACV,QAAQ,CAAC6B,GAAG,CAAC,GAAGF,MAAM;IAC5B,OAAOV,SAAS,CAACO,IAAI;EACzB;EACA,SAASc,cAAc,CAACtC,QAAQ,EAAEU,KAAK,EAAE;IACrC,IAAIa,SAAS,GAAG,KAAK;IACrB,KAAK,MAAMI,MAAM,IAAI3B,QAAQ,EAAE;MAC3BuB,SAAS,GAAGY,aAAa,CAACR,MAAM,EAAEjB,KAAK,CAAC,KAAKO,SAAS,CAACmB,IAAI,IAAIb,SAAS;IAC5E;IACA,OAAOA,SAAS,GAAGN,SAAS,CAACO,IAAI,GAAGP,SAAS,CAACmB,IAAI;EACtD;EACA,SAASG,aAAa,CAACvC,QAAQ,EAAEU,KAAK,EAAE;IACpCA,KAAK,CAACX,GAAG,GAAG,EAAE;IACdW,KAAK,CAACV,QAAQ,GAAG,CAAC,CAAC;IACnBsC,cAAc,CAACtC,QAAQ,EAAEU,KAAK,CAAC;IAC/B,OAAOO,SAAS,CAACO,IAAI;EACzB;EACA,SAASgB,aAAa,CAACb,MAAM,EAAEjB,KAAK,EAAE;IAClC,MAAMmB,GAAG,GAAGH,aAAa,CAACC,MAAM,EAAEC,QAAQ,CAAC;IAC3C,IAAIC,GAAG,IAAInB,KAAK,CAACV,QAAQ,EAAE;MACvBU,KAAK,CAACV,QAAQ,CAAC6B,GAAG,CAAC,GAAGF,MAAM;MAC5B,OAAOV,SAAS,CAACQ,YAAY;IACjC;IACAf,KAAK,CAACX,GAAG,CAACsC,IAAI,CAACR,GAAG,CAAC;IACnBnB,KAAK,CAACV,QAAQ,CAAC6B,GAAG,CAAC,GAAGF,MAAM;IAC5B,OAAOV,SAAS,CAACO,IAAI;EACzB;EACA,SAASiB,cAAc,CAACzC,QAAQ,EAAEU,KAAK,EAAE;IACrC,MAAMgC,eAAe,GAAG1C,QAAQ,CAACa,GAAG,CAAEc,MAAM,IAAKa,aAAa,CAACb,MAAM,EAAEjB,KAAK,CAAC,CAAC;IAC9E,QAAQ,IAAI;MACR,KAAKgC,eAAe,CAACC,IAAI,CAAEpB,SAAS,IAAKA,SAAS,KAAKN,SAAS,CAACO,IAAI,CAAC;QAClE,OAAOP,SAAS,CAACO,IAAI;MACzB,KAAKkB,eAAe,CAACC,IAAI,CAAEpB,SAAS,IAAKA,SAAS,KAAKN,SAAS,CAACQ,YAAY,CAAC;QAC1E,OAAOR,SAAS,CAACQ,YAAY;MACjC;QACI,OAAOR,SAAS,CAACmB,IAAI;IAAC;EAElC;EACA,SAASQ,gBAAgB,CAACf,GAAG,EAAEnB,KAAK,EAAE;IAClC,OAAOmC,iBAAiB,CAAC,CAAChB,GAAG,CAAC,EAAEnB,KAAK,CAAC;EAC1C;EACA,SAASmC,iBAAiB,CAACC,eAAe,EAAEpC,KAAK,EAAE;IAC/C,MAAMqC,IAAI,GAAGD,eAAe,YAAYE,KAAK,GACvCF,eAAe,GACfpC,KAAK,CAACX,GAAG,CAACkD,MAAM,CAAEpB,GAAG,IAAKiB,eAAe,CAACpC,KAAK,CAACV,QAAQ,CAAC6B,GAAG,CAAC,CAAC,CAAC;IACrE,MAAMN,SAAS,GAAGwB,IAAI,CACjBE,MAAM,CAAEpB,GAAG,IAAKA,GAAG,IAAInB,KAAK,CAACV,QAAQ,CAAC,CACtCa,GAAG,CAAEgB,GAAG,IAAK,OAAOnB,KAAK,CAACV,QAAQ,CAAC6B,GAAG,CAAC,CAAC,CAACb,MAAM,GAAG,CAAC;IACxD,IAAIO,SAAS,EAAE;MACXb,KAAK,CAACX,GAAG,GAAGW,KAAK,CAACX,GAAG,CAACkD,MAAM,CAAEnC,EAAE,IAAKA,EAAE,IAAIJ,KAAK,CAACV,QAAQ,CAAC;IAC9D;IACA,OAAOuB,SAAS,GAAGN,SAAS,CAACO,IAAI,GAAGP,SAAS,CAACmB,IAAI;EACtD;EACA,SAASc,SAAS,CAACxC,KAAK,EAAE;IACtB,OAAON,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEK,KAAK,EAAE;MAC5BX,GAAG,EAAE,EAAE;MACPC,QAAQ,EAAE,CAAC;IACf,CAAC,CAAC;EACN;EACA,SAASmD,UAAU,CAACJ,IAAI,EAAEK,MAAM,EAAE1C,KAAK,EAAE;IACrC,MAAM2C,QAAQ,GAAG3C,KAAK,CAACV,QAAQ,CAACoD,MAAM,CAACtC,EAAE,CAAC;IAC1C,MAAMwC,OAAO,GAAGlD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEgD,QAAQ,EAAED,MAAM,CAACG,OAAO,CAAC;IAC3D,MAAMC,MAAM,GAAG9B,aAAa,CAAC4B,OAAO,EAAE1B,QAAQ,CAAC;IAC/C,MAAM6B,SAAS,GAAGD,MAAM,KAAKJ,MAAM,CAACtC,EAAE;IACtC,IAAI2C,SAAS,EAAE;MACXV,IAAI,CAACK,MAAM,CAACtC,EAAE,CAAC,GAAG0C,MAAM;MACxB,OAAO9C,KAAK,CAACV,QAAQ,CAACoD,MAAM,CAACtC,EAAE,CAAC;IACpC;IACAJ,KAAK,CAACV,QAAQ,CAACwD,MAAM,CAAC,GAAGF,OAAO;IAChC,OAAOG,SAAS;EACpB;EACA,SAASC,gBAAgB,CAACN,MAAM,EAAE1C,KAAK,EAAE;IACrC,OAAOiD,iBAAiB,CAAC,CAACP,MAAM,CAAC,EAAE1C,KAAK,CAAC;EAC7C;EACA,SAASiD,iBAAiB,CAACC,OAAO,EAAElD,KAAK,EAAE;IACvC,MAAMmD,OAAO,GAAG,CAAC,CAAC;IAClBD,OAAO,GAAGA,OAAO,CAACX,MAAM,CAAEG,MAAM,IAAKA,MAAM,CAACtC,EAAE,IAAIJ,KAAK,CAACV,QAAQ,CAAC;IACjE,MAAM8D,iBAAiB,GAAGF,OAAO,CAAC5C,MAAM,GAAG,CAAC;IAC5C,IAAI8C,iBAAiB,EAAE;MACnB,MAAMC,YAAY,GAAGH,OAAO,CAACX,MAAM,CAAEG,MAAM,IAAKD,UAAU,CAACU,OAAO,EAAET,MAAM,EAAE1C,KAAK,CAAC,CAAC,CAACM,MAAM,GACtF,CAAC;MACL,IAAI+C,YAAY,EAAE;QACdrD,KAAK,CAACX,GAAG,GAAGW,KAAK,CAACX,GAAG,CAACc,GAAG,CAAEC,EAAE,IAAK+C,OAAO,CAAC/C,EAAE,CAAC,IAAIA,EAAE,CAAC;QACpD,OAAOG,SAAS,CAACO,IAAI;MACzB,CAAC,MACI;QACD,OAAOP,SAAS,CAACQ,YAAY;MACjC;IACJ;IACA,OAAOR,SAAS,CAACmB,IAAI;EACzB;EACA,SAAS4B,UAAU,CAACnD,GAAG,EAAEH,KAAK,EAAE;IAC5B,MAAM6C,OAAO,GAAG7C,KAAK,CAACX,GAAG,CAACkE,MAAM,CAAC,CAACV,OAAO,EAAEzC,EAAE,KAAK;MAC9C,MAAMoD,MAAM,GAAGrD,GAAG,CAACH,KAAK,CAACV,QAAQ,CAACc,EAAE,CAAC,CAAC;MACtC,IAAIoD,MAAM,KAAKxD,KAAK,CAACV,QAAQ,CAACc,EAAE,CAAC,EAAE;QAC/ByC,OAAO,CAAClB,IAAI,CAAC;UAAEvB,EAAE;UAAEyC,OAAO,EAAEW;QAAO,CAAC,CAAC;MACzC;MACA,OAAOX,OAAO;IAClB,CAAC,EAAE,EAAE,CAAC;IACN,MAAMK,OAAO,GAAGL,OAAO,CAACN,MAAM,CAAC,CAAC;MAAEnC;IAAG,CAAC,KAAKA,EAAE,IAAIJ,KAAK,CAACV,QAAQ,CAAC;IAChE,OAAO2D,iBAAiB,CAACC,OAAO,EAAElD,KAAK,CAAC;EAC5C;EACA,SAASyD,aAAa,CAAC;IAAEtD,GAAG;IAAEC;EAAG,CAAC,EAAEJ,KAAK,EAAE;IACvC,MAAMiB,MAAM,GAAGjB,KAAK,CAACV,QAAQ,CAACc,EAAE,CAAC;IACjC,IAAI,CAACa,MAAM,EAAE;MACT,OAAOV,SAAS,CAACmB,IAAI;IACzB;IACA,MAAMgC,aAAa,GAAGvD,GAAG,CAACc,MAAM,CAAC;IACjC,OAAO+B,gBAAgB,CAAC;MACpB5C,EAAE,EAAEA,EAAE;MACNyC,OAAO,EAAEa;IACb,CAAC,EAAE1D,KAAK,CAAC;EACb;EACA,SAAS2D,gBAAgB,CAAC1C,MAAM,EAAEjB,KAAK,EAAE;IACrC,OAAO4D,iBAAiB,CAAC,CAAC3C,MAAM,CAAC,EAAEjB,KAAK,CAAC;EAC7C;EACA,SAAS4D,iBAAiB,CAACtE,QAAQ,EAAEU,KAAK,EAAE;IACxC,MAAM6D,KAAK,GAAG,EAAE;IAChB,MAAMjB,OAAO,GAAG,EAAE;IAClB,KAAK,MAAM3B,MAAM,IAAI3B,QAAQ,EAAE;MAC3B,MAAMc,EAAE,GAAGY,aAAa,CAACC,MAAM,EAAEC,QAAQ,CAAC;MAC1C,IAAId,EAAE,IAAIJ,KAAK,CAACV,QAAQ,EAAE;QACtBsD,OAAO,CAACjB,IAAI,CAAC;UAAEvB,EAAE;UAAEyC,OAAO,EAAE5B;QAAO,CAAC,CAAC;MACzC,CAAC,MACI;QACD4C,KAAK,CAAClC,IAAI,CAACV,MAAM,CAAC;MACtB;IACJ;IACA,MAAM6C,kBAAkB,GAAGb,iBAAiB,CAACL,OAAO,EAAE5C,KAAK,CAAC;IAC5D,MAAM+D,gBAAgB,GAAGnC,cAAc,CAACiC,KAAK,EAAE7D,KAAK,CAAC;IACrD,QAAQ,IAAI;MACR,KAAK+D,gBAAgB,KAAKxD,SAAS,CAACmB,IAAI,IACpCoC,kBAAkB,KAAKvD,SAAS,CAACmB,IAAI;QACrC,OAAOnB,SAAS,CAACmB,IAAI;MACzB,KAAKqC,gBAAgB,KAAKxD,SAAS,CAACO,IAAI,IACpCgD,kBAAkB,KAAKvD,SAAS,CAACO,IAAI;QACrC,OAAOP,SAAS,CAACO,IAAI;MACzB;QACI,OAAOP,SAAS,CAACQ,YAAY;IAAC;EAE1C;EACA,OAAO;IACHyB,SAAS;IACTwB,MAAM,EAAExD,mBAAmB,CAACiB,aAAa,CAAC;IAC1CwC,OAAO,EAAEzD,mBAAmB,CAACoB,cAAc,CAAC;IAC5CsC,MAAM,EAAE1D,mBAAmB,CAACqB,aAAa,CAAC;IAC1CsC,MAAM,EAAE3D,mBAAmB,CAACsB,aAAa,CAAC;IAC1CsC,OAAO,EAAE5D,mBAAmB,CAACuB,cAAc,CAAC;IAC5CsC,SAAS,EAAE7D,mBAAmB,CAACwC,gBAAgB,CAAC;IAChDsB,UAAU,EAAE9D,mBAAmB,CAACyC,iBAAiB,CAAC;IAClDsB,SAAS,EAAE/D,mBAAmB,CAACmD,gBAAgB,CAAC;IAChDa,UAAU,EAAEhE,mBAAmB,CAACoD,iBAAiB,CAAC;IAClDa,SAAS,EAAEjE,mBAAmB,CAAC0B,gBAAgB,CAAC;IAChDwC,UAAU,EAAElE,mBAAmB,CAAC2B,iBAAiB,CAAC;IAClDhC,GAAG,EAAEK,mBAAmB,CAAC8C,UAAU,CAAC;IACpCqB,MAAM,EAAEnE,mBAAmB,CAACiD,aAAa;EAC7C,CAAC;AACL;AAEA,SAASmB,wBAAwB,CAAC1D,QAAQ,EAAE2D,IAAI,EAAE;EAC9C,MAAM;IAAEJ,SAAS;IAAEC,UAAU;IAAElC;EAAU,CAAC,GAAGhB,0BAA0B,CAACN,QAAQ,CAAC;EACjF,SAASO,aAAa,CAACR,MAAM,EAAEjB,KAAK,EAAE;IAClC,OAAO4B,cAAc,CAAC,CAACX,MAAM,CAAC,EAAEjB,KAAK,CAAC;EAC1C;EACA,SAAS4B,cAAc,CAACkD,SAAS,EAAE9E,KAAK,EAAE;IACtC,MAAM+E,MAAM,GAAGD,SAAS,CAACvC,MAAM,CAAEyC,KAAK,IAAK,EAAEhE,aAAa,CAACgE,KAAK,EAAE9D,QAAQ,CAAC,IAAIlB,KAAK,CAACV,QAAQ,CAAC,CAAC;IAC/F,IAAIyF,MAAM,CAACzE,MAAM,KAAK,CAAC,EAAE;MACrB,OAAOC,SAAS,CAACmB,IAAI;IACzB,CAAC,MACI;MACDuD,KAAK,CAACF,MAAM,EAAE/E,KAAK,CAAC;MACpB,OAAOO,SAAS,CAACO,IAAI;IACzB;EACJ;EACA,SAASe,aAAa,CAACkD,MAAM,EAAE/E,KAAK,EAAE;IAClCA,KAAK,CAACV,QAAQ,GAAG,CAAC,CAAC;IACnBU,KAAK,CAACX,GAAG,GAAG,EAAE;IACduC,cAAc,CAACmD,MAAM,EAAE/E,KAAK,CAAC;IAC7B,OAAOO,SAAS,CAACO,IAAI;EACzB;EACA,SAASgB,aAAa,CAACb,MAAM,EAAEjB,KAAK,EAAE;IAClC,MAAMI,EAAE,GAAGY,aAAa,CAACC,MAAM,EAAEC,QAAQ,CAAC;IAC1C,IAAId,EAAE,IAAIJ,KAAK,CAACV,QAAQ,EAAE;MACtBU,KAAK,CAACX,GAAG,GAAGW,KAAK,CAACX,GAAG,CAACkD,MAAM,CAAE2C,GAAG,IAAKA,GAAG,KAAK9E,EAAE,CAAC;MACjD6E,KAAK,CAAC,CAAChE,MAAM,CAAC,EAAEjB,KAAK,CAAC;MACtB,OAAOO,SAAS,CAACO,IAAI;IACzB,CAAC,MACI;MACD,OAAOW,aAAa,CAACR,MAAM,EAAEjB,KAAK,CAAC;IACvC;EACJ;EACA,SAAS+B,cAAc,CAACzC,QAAQ,EAAEU,KAAK,EAAE;IACrC,MAAMgC,eAAe,GAAG1C,QAAQ,CAACa,GAAG,CAAEc,MAAM,IAAKa,aAAa,CAACb,MAAM,EAAEjB,KAAK,CAAC,CAAC;IAC9E,QAAQ,IAAI;MACR,KAAKgC,eAAe,CAACC,IAAI,CAAEpB,SAAS,IAAKA,SAAS,KAAKN,SAAS,CAACO,IAAI,CAAC;QAClE,OAAOP,SAAS,CAACO,IAAI;MACzB,KAAKkB,eAAe,CAACC,IAAI,CAAEpB,SAAS,IAAKA,SAAS,KAAKN,SAAS,CAACQ,YAAY,CAAC;QAC1E,OAAOR,SAAS,CAACQ,YAAY;MACjC;QACI,OAAOR,SAAS,CAACmB,IAAI;IAAC;EAElC;EACA,SAASsB,gBAAgB,CAACN,MAAM,EAAE1C,KAAK,EAAE;IACrC,OAAOiD,iBAAiB,CAAC,CAACP,MAAM,CAAC,EAAE1C,KAAK,CAAC;EAC7C;EACA,SAASmF,gBAAgB,CAACJ,MAAM,EAAErC,MAAM,EAAE1C,KAAK,EAAE;IAC7C,IAAI,EAAE0C,MAAM,CAACtC,EAAE,IAAIJ,KAAK,CAACV,QAAQ,CAAC,EAAE;MAChC,OAAO,KAAK;IAChB;IACA,MAAMqD,QAAQ,GAAG3C,KAAK,CAACV,QAAQ,CAACoD,MAAM,CAACtC,EAAE,CAAC;IAC1C,MAAMwC,OAAO,GAAGlD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEgD,QAAQ,EAAED,MAAM,CAACG,OAAO,CAAC;IAC3D,MAAMC,MAAM,GAAG9B,aAAa,CAAC4B,OAAO,EAAE1B,QAAQ,CAAC;IAC/C,OAAOlB,KAAK,CAACV,QAAQ,CAACoD,MAAM,CAACtC,EAAE,CAAC;IAChC2E,MAAM,CAACpD,IAAI,CAACiB,OAAO,CAAC;IACpB,OAAOE,MAAM,KAAKJ,MAAM,CAACtC,EAAE;EAC/B;EACA,SAAS6C,iBAAiB,CAACC,OAAO,EAAElD,KAAK,EAAE;IACvC,MAAM+E,MAAM,GAAG,EAAE;IACjB,MAAM1B,YAAY,GAAGH,OAAO,CAACX,MAAM,CAAEG,MAAM,IAAKyC,gBAAgB,CAACJ,MAAM,EAAErC,MAAM,EAAE1C,KAAK,CAAC,CAAC,CACnFM,MAAM,GAAG,CAAC;IACf,IAAIyE,MAAM,CAACzE,MAAM,KAAK,CAAC,EAAE;MACrB,OAAOC,SAAS,CAACmB,IAAI;IACzB,CAAC,MACI;MACD,MAAM0D,WAAW,GAAGpF,KAAK,CAACX,GAAG;MAC7B,MAAMgG,cAAc,GAAG,EAAE;MACzBrF,KAAK,CAACX,GAAG,GAAGW,KAAK,CAACX,GAAG,CAACkD,MAAM,CAAC,CAACnC,EAAE,EAAEkF,KAAK,KAAK;QACxC,IAAIlF,EAAE,IAAIJ,KAAK,CAACV,QAAQ,EAAE;UACtB,OAAO,IAAI;QACf,CAAC,MACI;UACD+F,cAAc,CAAC1D,IAAI,CAAC2D,KAAK,CAAC;UAC1B,OAAO,KAAK;QAChB;MACJ,CAAC,CAAC;MACFL,KAAK,CAACF,MAAM,EAAE/E,KAAK,CAAC;MACpB,IAAI,CAACqD,YAAY,IACbgC,cAAc,CAACE,KAAK,CAAEC,CAAC,IAAKxF,KAAK,CAACX,GAAG,CAACmG,CAAC,CAAC,KAAKJ,WAAW,CAACI,CAAC,CAAC,CAAC,EAAE;QAC9D,OAAOjF,SAAS,CAACQ,YAAY;MACjC,CAAC,MACI;QACD,OAAOR,SAAS,CAACO,IAAI;MACzB;IACJ;EACJ;EACA,SAASwC,UAAU,CAACmC,YAAY,EAAEzF,KAAK,EAAE;IACrC,MAAMkD,OAAO,GAAGlD,KAAK,CAACX,GAAG,CAACkE,MAAM,CAAC,CAACV,OAAO,EAAEzC,EAAE,KAAK;MAC9C,MAAMoD,MAAM,GAAGiC,YAAY,CAACzF,KAAK,CAACV,QAAQ,CAACc,EAAE,CAAC,CAAC;MAC/C,IAAIoD,MAAM,KAAKxD,KAAK,CAACV,QAAQ,CAACc,EAAE,CAAC,EAAE;QAC/ByC,OAAO,CAAClB,IAAI,CAAC;UAAEvB,EAAE;UAAEyC,OAAO,EAAEW;QAAO,CAAC,CAAC;MACzC;MACA,OAAOX,OAAO;IAClB,CAAC,EAAE,EAAE,CAAC;IACN,OAAOI,iBAAiB,CAACC,OAAO,EAAElD,KAAK,CAAC;EAC5C;EACA,SAASyD,aAAa,CAAC;IAAEtD,GAAG;IAAEC;EAAG,CAAC,EAAEJ,KAAK,EAAE;IACvC,MAAMiB,MAAM,GAAGjB,KAAK,CAACV,QAAQ,CAACc,EAAE,CAAC;IACjC,IAAI,CAACa,MAAM,EAAE;MACT,OAAOV,SAAS,CAACmB,IAAI;IACzB;IACA,MAAMgC,aAAa,GAAGvD,GAAG,CAACc,MAAM,CAAC;IACjC,OAAO+B,gBAAgB,CAAC;MACpB5C,EAAE,EAAEA,EAAE;MACNyC,OAAO,EAAEa;IACb,CAAC,EAAE1D,KAAK,CAAC;EACb;EACA,SAAS2D,gBAAgB,CAAC1C,MAAM,EAAEjB,KAAK,EAAE;IACrC,OAAO4D,iBAAiB,CAAC,CAAC3C,MAAM,CAAC,EAAEjB,KAAK,CAAC;EAC7C;EACA,SAAS4D,iBAAiB,CAACtE,QAAQ,EAAEU,KAAK,EAAE;IACxC,MAAM6D,KAAK,GAAG,EAAE;IAChB,MAAMjB,OAAO,GAAG,EAAE;IAClB,KAAK,MAAM3B,MAAM,IAAI3B,QAAQ,EAAE;MAC3B,MAAMc,EAAE,GAAGY,aAAa,CAACC,MAAM,EAAEC,QAAQ,CAAC;MAC1C,IAAId,EAAE,IAAIJ,KAAK,CAACV,QAAQ,EAAE;QACtBsD,OAAO,CAACjB,IAAI,CAAC;UAAEvB,EAAE;UAAEyC,OAAO,EAAE5B;QAAO,CAAC,CAAC;MACzC,CAAC,MACI;QACD4C,KAAK,CAAClC,IAAI,CAACV,MAAM,CAAC;MACtB;IACJ;IACA,MAAM6C,kBAAkB,GAAGb,iBAAiB,CAACL,OAAO,EAAE5C,KAAK,CAAC;IAC5D,MAAM+D,gBAAgB,GAAGnC,cAAc,CAACiC,KAAK,EAAE7D,KAAK,CAAC;IACrD,QAAQ,IAAI;MACR,KAAK+D,gBAAgB,KAAKxD,SAAS,CAACmB,IAAI,IACpCoC,kBAAkB,KAAKvD,SAAS,CAACmB,IAAI;QACrC,OAAOnB,SAAS,CAACmB,IAAI;MACzB,KAAKqC,gBAAgB,KAAKxD,SAAS,CAACO,IAAI,IACpCgD,kBAAkB,KAAKvD,SAAS,CAACO,IAAI;QACrC,OAAOP,SAAS,CAACO,IAAI;MACzB;QACI,OAAOP,SAAS,CAACQ,YAAY;IAAC;EAE1C;EACA,SAASkE,KAAK,CAACF,MAAM,EAAE/E,KAAK,EAAE;IAC1B+E,MAAM,CAACF,IAAI,CAACA,IAAI,CAAC;IACjB,MAAMxF,GAAG,GAAG,EAAE;IACd,IAAImG,CAAC,GAAG,CAAC;IACT,IAAIE,CAAC,GAAG,CAAC;IACT,OAAOF,CAAC,GAAGT,MAAM,CAACzE,MAAM,IAAIoF,CAAC,GAAG1F,KAAK,CAACX,GAAG,CAACiB,MAAM,EAAE;MAC9C,MAAM0E,KAAK,GAAGD,MAAM,CAACS,CAAC,CAAC;MACvB,MAAMG,OAAO,GAAG3E,aAAa,CAACgE,KAAK,EAAE9D,QAAQ,CAAC;MAC9C,MAAM0E,QAAQ,GAAG5F,KAAK,CAACX,GAAG,CAACqG,CAAC,CAAC;MAC7B,MAAMzE,MAAM,GAAGjB,KAAK,CAACV,QAAQ,CAACsG,QAAQ,CAAC;MACvC,IAAIf,IAAI,CAACG,KAAK,EAAE/D,MAAM,CAAC,IAAI,CAAC,EAAE;QAC1B5B,GAAG,CAACsC,IAAI,CAACgE,OAAO,CAAC;QACjBH,CAAC,EAAE;MACP,CAAC,MACI;QACDnG,GAAG,CAACsC,IAAI,CAACiE,QAAQ,CAAC;QAClBF,CAAC,EAAE;MACP;IACJ;IACA,IAAIF,CAAC,GAAGT,MAAM,CAACzE,MAAM,EAAE;MACnBN,KAAK,CAACX,GAAG,GAAGA,GAAG,CAACwG,MAAM,CAACd,MAAM,CAACe,KAAK,CAACN,CAAC,CAAC,CAACrF,GAAG,CAACe,QAAQ,CAAC,CAAC;IACzD,CAAC,MACI;MACDlB,KAAK,CAACX,GAAG,GAAGA,GAAG,CAACwG,MAAM,CAAC7F,KAAK,CAACX,GAAG,CAACyG,KAAK,CAACJ,CAAC,CAAC,CAAC;IAC9C;IACAX,MAAM,CAACgB,OAAO,CAAC,CAACf,KAAK,EAAEQ,CAAC,KAAK;MACzBxF,KAAK,CAACV,QAAQ,CAAC4B,QAAQ,CAAC8D,KAAK,CAAC,CAAC,GAAGA,KAAK;IAC3C,CAAC,CAAC;EACN;EACA,OAAO;IACHP,SAAS;IACTC,UAAU;IACVlC,SAAS;IACTwB,MAAM,EAAExD,mBAAmB,CAACiB,aAAa,CAAC;IAC1C4C,SAAS,EAAE7D,mBAAmB,CAACwC,gBAAgB,CAAC;IAChDuB,SAAS,EAAE/D,mBAAmB,CAACmD,gBAAgB,CAAC;IAChDO,MAAM,EAAE1D,mBAAmB,CAACqB,aAAa,CAAC;IAC1CsC,MAAM,EAAE3D,mBAAmB,CAACsB,aAAa,CAAC;IAC1CsC,OAAO,EAAE5D,mBAAmB,CAACuB,cAAc,CAAC;IAC5CkC,OAAO,EAAEzD,mBAAmB,CAACoB,cAAc,CAAC;IAC5C0C,UAAU,EAAE9D,mBAAmB,CAACyC,iBAAiB,CAAC;IAClDuB,UAAU,EAAEhE,mBAAmB,CAACoD,iBAAiB,CAAC;IAClDzD,GAAG,EAAEK,mBAAmB,CAAC8C,UAAU,CAAC;IACpCqB,MAAM,EAAEnE,mBAAmB,CAACiD,aAAa;EAC7C,CAAC;AACL;AAEA,SAASuC,mBAAmB,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EAAA;EACvC,MAAM;IAAE/E,QAAQ;IAAEgF;EAAa,CAAC,GAAG;IAC/BhF,QAAQ,uBAAE+E,OAAO,CAAC/E,QAAQ,iEAAMD,MAAM,IAAKA,MAAM,CAACb,EAAG;IACrD8F,YAAY,2BAAED,OAAO,CAACC,YAAY,yEAAI;EAC1C,CAAC;EACD,MAAMC,YAAY,GAAG5G,yBAAyB,EAAE;EAChD,MAAM6G,gBAAgB,GAAGxG,sBAAsB,EAAE;EACjD,MAAMyG,YAAY,GAAGH,YAAY,GAC3BtB,wBAAwB,CAAC1D,QAAQ,EAAEgF,YAAY,CAAC,GAChD1E,0BAA0B,CAACN,QAAQ,CAAC;EAC1C,OAAO;IACHA,QAAQ;IACRgF,YAAY;IACZ,GAAGC,YAAY;IACf,GAAGC,gBAAgB;IACnB,GAAGC;EACP,CAAC;AACL;AAEA,MAAMC,UAAU,CAAC;;AAGjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASA,UAAU,EAAEN,mBAAmB;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}