{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { createEntityAdapter } from '@ngrx/entity';\nimport { addItem, removeItem, updateItem } from './item.actions';\nexport const itemAdapter = createEntityAdapter();\nexport const initialState = itemAdapter.getInitialState({});\nexport const itemReducer = createReducer(initialState, on(addItem, (state, {\n  item\n}) => itemAdapter.addOne(item, state)), on(removeItem, (state, {\n  id\n}) => itemAdapter.removeOne(id, state)), on(updateItem, (state, {\n  id\n}) => itemAdapter.updateOne()));","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAC/C,SAAsBC,mBAAmB,QAAQ,cAAc;AAC/D,SAASC,OAAO,EAAEC,UAAU,EAAEC,UAAU,QAAQ,gBAAgB;AAGhE,OAAO,MAAMC,WAAW,GAAGJ,mBAAmB,EAAQ;AAItD,OAAO,MAAMK,YAAY,GAAcD,WAAW,CAACE,eAAe,CAAC,EAAE,CAAC;AAEtE,OAAO,MAAMC,WAAW,GAAGT,aAAa,CACtCO,YAAY,EACZN,EAAE,CAACE,OAAO,EAAE,CAACO,KAAK,EAAE;EAAEC;AAAI,CAAE,KAAKL,WAAW,CAACM,MAAM,CAACD,IAAI,EAAED,KAAK,CAAC,CAAC,EACjET,EAAE,CAACG,UAAU,EAAE,CAACM,KAAK,EAAE;EAAEG;AAAE,CAAE,KAAKP,WAAW,CAACQ,SAAS,CAACD,EAAE,EAAEH,KAAK,CAAC,CAAC,EACnET,EAAE,CAACI,UAAU,EAAC,CAACK,KAAK,EAAC;EAACG;AAAE,CAAC,KAAGP,WAAW,CAACS,SAAS,EAAE,CAAC,CACrD","names":["createReducer","on","createEntityAdapter","addItem","removeItem","updateItem","itemAdapter","initialState","getInitialState","itemReducer","state","item","addOne","id","removeOne","updateOne"],"sourceRoot":"","sources":["C:\\Work\\Assignment\\ngx-Demo\\src\\app\\store\\item.reducer.ts"],"sourcesContent":["import { createReducer, on } from '@ngrx/store';\r\nimport { EntityState, createEntityAdapter } from '@ngrx/entity';\r\nimport { addItem, removeItem, updateItem } from './item.actions';\r\nimport { Item } from './app.state';\r\n\r\nexport const itemAdapter = createEntityAdapter<Item>();\r\n\r\nexport interface ItemState extends EntityState<Item> {}\r\n\r\nexport const initialState: ItemState = itemAdapter.getInitialState({});\r\n\r\nexport const itemReducer = createReducer(\r\n  initialState,\r\n  on(addItem, (state, { item }) => itemAdapter.addOne(item, state)),\r\n  on(removeItem, (state, { id }) => itemAdapter.removeOne(id, state)),\r\n  on(updateItem,(state,{id})=>itemAdapter.updateOne())\r\n);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}