{"ast":null,"code":"import * as i1 from 'rxjs';\nimport { merge, Observable, Subject, defer, pipe, of } from 'rxjs';\nimport { ignoreElements, materialize, map, catchError, filter, groupBy, mergeMap, exhaustMap, dematerialize, take, concatMap, finalize, withLatestFrom } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, NgModule, Optional, inject, makeEnvironmentProviders, ENVIRONMENT_INITIALIZER } from '@angular/core';\nimport * as i3 from '@ngrx/store';\nimport { ScannedActionsSubject, createAction, ROOT_STORE_PROVIDER, FEATURE_STATE_PROVIDER, Store } from '@ngrx/store';\nconst DEFAULT_EFFECT_CONFIG = {\n  dispatch: true,\n  functional: false,\n  useEffectsErrorHandler: true\n};\nconst CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n\n/**\n * @description\n *\n * Creates an effect from a source and an `EffectConfig`.\n *\n * @param source A function which returns an observable or observable factory.\n * @param config A `EffectConfig` to configure the effect. By default,\n * `dispatch` is true, `functional` is false, and `useEffectsErrorHandler` is\n * true.\n * @returns If `EffectConfig`#`functional` is true, returns the source function.\n * Else, returns the source function result. When `EffectConfig`#`dispatch` is\n * true, the source function result needs to be `Observable<Action>`.\n *\n * @usageNotes\n *\n * ### Class Effects\n *\n * ```ts\n * @Injectable()\n * export class FeatureEffects {\n *   // mapping to a different action\n *   readonly effect1$ = createEffect(\n *     () => this.actions$.pipe(\n *       ofType(FeatureActions.actionOne),\n *       map(() => FeatureActions.actionTwo())\n *     )\n *   );\n *\n *   // non-dispatching effect\n *   readonly effect2$ = createEffect(\n *     () => this.actions$.pipe(\n *       ofType(FeatureActions.actionTwo),\n *       tap(() => console.log('Action Two Dispatched'))\n *     ),\n *     { dispatch: false } // FeatureActions.actionTwo is not dispatched\n *   );\n *\n *   constructor(private readonly actions$: Actions) {}\n * }\n * ```\n *\n * ### Functional Effects\n *\n * ```ts\n * // mapping to a different action\n * export const loadUsers = createEffect(\n *   (actions$ = inject(Actions), usersService = inject(UsersService)) => {\n *     return actions$.pipe(\n *       ofType(UsersPageActions.opened),\n *       exhaustMap(() => {\n *         return usersService.getAll().pipe(\n *           map((users) => UsersApiActions.usersLoadedSuccess({ users })),\n *           catchError((error) =>\n *             of(UsersApiActions.usersLoadedFailure({ error }))\n *           )\n *         );\n *       })\n *     );\n *   },\n *   { functional: true }\n * );\n *\n * // non-dispatching functional effect\n * export const logDispatchedActions = createEffect(\n *   () => inject(Actions).pipe(tap(console.log)),\n *   { functional: true, dispatch: false }\n * );\n * ```\n */\nfunction createEffect(source, config = {}) {\n  const effect = config.functional ? source : source();\n  const value = {\n    ...DEFAULT_EFFECT_CONFIG,\n    ...config // Overrides any defaults if values are provided\n  };\n\n  Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n    value\n  });\n  return effect;\n}\nfunction getCreateEffectMetadata(instance) {\n  const propertyNames = Object.getOwnPropertyNames(instance);\n  const metadata = propertyNames.filter(propertyName => {\n    if (instance[propertyName] && instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY)) {\n      // If the property type has overridden `hasOwnProperty` we need to ensure\n      // that the metadata is valid (containing a `dispatch` property)\n      // https://github.com/ngrx/platform/issues/2975\n      const property = instance[propertyName];\n      return property[CREATE_EFFECT_METADATA_KEY].hasOwnProperty('dispatch');\n    }\n    return false;\n  }).map(propertyName => {\n    const metaData = instance[propertyName][CREATE_EFFECT_METADATA_KEY];\n    return {\n      propertyName,\n      ...metaData\n    };\n  });\n  return metadata;\n}\nfunction getEffectsMetadata(instance) {\n  return getSourceMetadata(instance).reduce((acc, {\n    propertyName,\n    dispatch,\n    useEffectsErrorHandler\n  }) => {\n    acc[propertyName] = {\n      dispatch,\n      useEffectsErrorHandler\n    };\n    return acc;\n  }, {});\n}\nfunction getSourceMetadata(instance) {\n  return getCreateEffectMetadata(instance);\n}\nfunction getSourceForInstance(instance) {\n  return Object.getPrototypeOf(instance);\n}\nfunction isClassInstance(obj) {\n  return obj.constructor.name !== 'Object' && obj.constructor.name !== 'Function';\n}\nfunction isClass(classOrRecord) {\n  return typeof classOrRecord === 'function';\n}\nfunction getClasses(classesAndRecords) {\n  return classesAndRecords.filter(isClass);\n}\nfunction mergeEffects(sourceInstance, globalErrorHandler, effectsErrorHandler) {\n  const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n  const observables$ = getSourceMetadata(sourceInstance).map(({\n    propertyName,\n    dispatch,\n    useEffectsErrorHandler\n  }) => {\n    const observable$ = typeof sourceInstance[propertyName] === 'function' ? sourceInstance[propertyName]() : sourceInstance[propertyName];\n    const effectAction$ = useEffectsErrorHandler ? effectsErrorHandler(observable$, globalErrorHandler) : observable$;\n    if (dispatch === false) {\n      return effectAction$.pipe(ignoreElements());\n    }\n    const materialized$ = effectAction$.pipe(materialize());\n    return materialized$.pipe(map(notification => ({\n      effect: sourceInstance[propertyName],\n      notification,\n      propertyName,\n      sourceName,\n      sourceInstance\n    })));\n  });\n  return merge(...observables$);\n}\nconst MAX_NUMBER_OF_RETRY_ATTEMPTS = 10;\nfunction defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft = MAX_NUMBER_OF_RETRY_ATTEMPTS) {\n  return observable$.pipe(catchError(error => {\n    if (errorHandler) errorHandler.handleError(error);\n    if (retryAttemptLeft <= 1) {\n      return observable$; // last attempt\n    }\n    // Return observable that produces this particular effect\n    return defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft - 1);\n  }));\n}\nclass Actions extends Observable {\n  constructor(source) {\n    super();\n    if (source) {\n      this.source = source;\n    }\n  }\n  lift(operator) {\n    const observable = new Actions();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n}\n/** @nocollapse */\nActions.ɵfac = function Actions_Factory(t) {\n  return new (t || Actions)(i0.ɵɵinject(ScannedActionsSubject));\n};\n/** @nocollapse */\nActions.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Actions,\n  factory: Actions.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Actions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Observable,\n      decorators: [{\n        type: Inject,\n        args: [ScannedActionsSubject]\n      }]\n    }];\n  }, null);\n})();\n/**\n * `ofType` filters an Observable of `Actions` into an Observable of the actions\n * whose type strings are passed to it.\n *\n * For example, if `actions` has type `Actions<AdditionAction|SubstractionAction>`, and\n * the type of the `Addition` action is `add`, then\n * `actions.pipe(ofType('add'))` returns an `Observable<AdditionAction>`.\n *\n * Properly typing this function is hard and requires some advanced TS tricks\n * below.\n *\n * Type narrowing automatically works, as long as your `actions` object\n * starts with a `Actions<SomeUnionOfActions>` instead of generic `Actions`.\n *\n * For backwards compatibility, when one passes a single type argument\n * `ofType<T>('something')` the result is an `Observable<T>`. Note, that `T`\n * completely overrides any possible inference from 'something'.\n *\n * Unfortunately, for unknown 'actions: Actions' these types will produce\n * 'Observable<never>'. In such cases one has to manually set the generic type\n * like `actions.ofType<AdditionAction>('add')`.\n *\n * @usageNotes\n *\n * Filter the Actions stream on the \"customers page loaded\" action\n *\n * ```ts\n * import { ofType } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  ofType(fromCustomers.pageLoaded)\n * )\n * ```\n */\nfunction ofType(...allowedTypes) {\n  return filter(action => allowedTypes.some(typeOrActionCreator => {\n    if (typeof typeOrActionCreator === 'string') {\n      // Comparing the string to type\n      return typeOrActionCreator === action.type;\n    }\n    // We are filtering by ActionCreator\n    return typeOrActionCreator.type === action.type;\n  }));\n}\nconst _ROOT_EFFECTS_GUARD = new InjectionToken('@ngrx/effects Internal Root Guard');\nconst USER_PROVIDED_EFFECTS = new InjectionToken('@ngrx/effects User Provided Effects');\nconst _ROOT_EFFECTS = new InjectionToken('@ngrx/effects Internal Root Effects');\nconst _ROOT_EFFECTS_INSTANCES = new InjectionToken('@ngrx/effects Internal Root Effects Instances');\nconst _FEATURE_EFFECTS = new InjectionToken('@ngrx/effects Internal Feature Effects');\nconst _FEATURE_EFFECTS_INSTANCE_GROUPS = new InjectionToken('@ngrx/effects Internal Feature Effects Instance Groups');\nconst EFFECTS_ERROR_HANDLER = new InjectionToken('@ngrx/effects Effects Error Handler', {\n  providedIn: 'root',\n  factory: () => defaultEffectsErrorHandler\n});\nconst ROOT_EFFECTS_INIT = '@ngrx/effects/init';\nconst rootEffectsInit = createAction(ROOT_EFFECTS_INIT);\nfunction reportInvalidActions(output, reporter) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n    if (isInvalidAction) {\n      reporter.handleError(new Error(`Effect ${getEffectName(output)} dispatched an invalid action: ${stringify(action)}`));\n    }\n  }\n}\nfunction isAction(action) {\n  return typeof action !== 'function' && action && action.type && typeof action.type === 'string';\n}\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName\n}) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n  return `\"${sourceName}.${String(propertyName)}${isMethod ? '()' : ''}\"`;\n}\nfunction stringify(action) {\n  try {\n    return JSON.stringify(action);\n  } catch (_unused) {\n    return action;\n  }\n}\nconst onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';\nfunction isOnIdentifyEffects(instance) {\n  return isFunction(instance, onIdentifyEffectsKey);\n}\nconst onRunEffectsKey = 'ngrxOnRunEffects';\nfunction isOnRunEffects(instance) {\n  return isFunction(instance, onRunEffectsKey);\n}\nconst onInitEffects = 'ngrxOnInitEffects';\nfunction isOnInitEffects(instance) {\n  return isFunction(instance, onInitEffects);\n}\nfunction isFunction(instance, functionName) {\n  return instance && functionName in instance && typeof instance[functionName] === 'function';\n}\nclass EffectSources extends Subject {\n  constructor(errorHandler, effectsErrorHandler) {\n    super();\n    this.errorHandler = errorHandler;\n    this.effectsErrorHandler = effectsErrorHandler;\n  }\n  addEffects(effectSourceInstance) {\n    this.next(effectSourceInstance);\n  }\n  /**\n   * @internal\n   */\n  toActions() {\n    return this.pipe(groupBy(effectsInstance => isClassInstance(effectsInstance) ? getSourceForInstance(effectsInstance) : effectsInstance), mergeMap(source$ => {\n      return source$.pipe(groupBy(effectsInstance));\n    }), mergeMap(source$ => {\n      const effect$ = source$.pipe(exhaustMap(sourceInstance => {\n        return resolveEffectSource(this.errorHandler, this.effectsErrorHandler)(sourceInstance);\n      }), map(output => {\n        reportInvalidActions(output, this.errorHandler);\n        return output.notification;\n      }), filter(notification => notification.kind === 'N' && notification.value != null), dematerialize());\n      // start the stream with an INIT action\n      // do this only for the first Effect instance\n      const init$ = source$.pipe(take(1), filter(isOnInitEffects), map(instance => instance.ngrxOnInitEffects()));\n      return merge(effect$, init$);\n    }));\n  }\n}\n/** @nocollapse */\nEffectSources.ɵfac = function EffectSources_Factory(t) {\n  return new (t || EffectSources)(i0.ɵɵinject(i0.ErrorHandler), i0.ɵɵinject(EFFECTS_ERROR_HANDLER));\n};\n/** @nocollapse */\nEffectSources.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: EffectSources,\n  factory: EffectSources.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectSources, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [EFFECTS_ERROR_HANDLER]\n      }]\n    }];\n  }, null);\n})();\nfunction effectsInstance(sourceInstance) {\n  if (isOnIdentifyEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnIdentifyEffects();\n  }\n  return '';\n}\nfunction resolveEffectSource(errorHandler, effectsErrorHandler) {\n  return sourceInstance => {\n    const mergedEffects$ = mergeEffects(sourceInstance, errorHandler, effectsErrorHandler);\n    if (isOnRunEffects(sourceInstance)) {\n      return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n    }\n    return mergedEffects$;\n  };\n}\nclass EffectsRunner {\n  constructor(effectSources, store) {\n    this.effectSources = effectSources;\n    this.store = store;\n    this.effectsSubscription = null;\n  }\n  get isStarted() {\n    return !!this.effectsSubscription;\n  }\n  start() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources.toActions().subscribe(this.store);\n    }\n  }\n  ngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\n}\n/** @nocollapse */\nEffectsRunner.ɵfac = function EffectsRunner_Factory(t) {\n  return new (t || EffectsRunner)(i0.ɵɵinject(EffectSources), i0.ɵɵinject(i3.Store));\n};\n/** @nocollapse */\nEffectsRunner.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: EffectsRunner,\n  factory: EffectsRunner.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsRunner, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: EffectSources\n    }, {\n      type: i3.Store\n    }];\n  }, null);\n})();\nclass EffectsRootModule {\n  constructor(sources, runner, store, rootEffectsInstances, storeRootModule, storeFeatureModule, guard) {\n    this.sources = sources;\n    runner.start();\n    for (const effectsInstance of rootEffectsInstances) {\n      sources.addEffects(effectsInstance);\n    }\n    store.dispatch({\n      type: ROOT_EFFECTS_INIT\n    });\n  }\n  addEffects(effectsInstance) {\n    this.sources.addEffects(effectsInstance);\n  }\n}\n/** @nocollapse */\nEffectsRootModule.ɵfac = function EffectsRootModule_Factory(t) {\n  return new (t || EffectsRootModule)(i0.ɵɵinject(EffectSources), i0.ɵɵinject(EffectsRunner), i0.ɵɵinject(i3.Store), i0.ɵɵinject(_ROOT_EFFECTS_INSTANCES), i0.ɵɵinject(i3.StoreRootModule, 8), i0.ɵɵinject(i3.StoreFeatureModule, 8), i0.ɵɵinject(_ROOT_EFFECTS_GUARD, 8));\n};\n/** @nocollapse */\nEffectsRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EffectsRootModule\n});\n/** @nocollapse */\nEffectsRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsRootModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: EffectSources\n    }, {\n      type: EffectsRunner\n    }, {\n      type: i3.Store\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [_ROOT_EFFECTS_INSTANCES]\n      }]\n    }, {\n      type: i3.StoreRootModule,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.StoreFeatureModule,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [_ROOT_EFFECTS_GUARD]\n      }]\n    }];\n  }, null);\n})();\nclass EffectsFeatureModule {\n  constructor(effectsRootModule, effectsInstanceGroups, storeRootModule, storeFeatureModule) {\n    const effectsInstances = effectsInstanceGroups.flat();\n    for (const effectsInstance of effectsInstances) {\n      effectsRootModule.addEffects(effectsInstance);\n    }\n  }\n}\n/** @nocollapse */\nEffectsFeatureModule.ɵfac = function EffectsFeatureModule_Factory(t) {\n  return new (t || EffectsFeatureModule)(i0.ɵɵinject(EffectsRootModule), i0.ɵɵinject(_FEATURE_EFFECTS_INSTANCE_GROUPS), i0.ɵɵinject(i3.StoreRootModule, 8), i0.ɵɵinject(i3.StoreFeatureModule, 8));\n};\n/** @nocollapse */\nEffectsFeatureModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EffectsFeatureModule\n});\n/** @nocollapse */\nEffectsFeatureModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsFeatureModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: EffectsRootModule\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [_FEATURE_EFFECTS_INSTANCE_GROUPS]\n      }]\n    }, {\n      type: i3.StoreRootModule,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.StoreFeatureModule,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\nclass EffectsModule {\n  static forFeature(...featureEffects) {\n    const effects = featureEffects.flat();\n    const effectsClasses = getClasses(effects);\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [effectsClasses, {\n        provide: _FEATURE_EFFECTS,\n        multi: true,\n        useValue: effects\n      }, {\n        provide: USER_PROVIDED_EFFECTS,\n        multi: true,\n        useValue: []\n      }, {\n        provide: _FEATURE_EFFECTS_INSTANCE_GROUPS,\n        multi: true,\n        useFactory: createEffectsInstances,\n        deps: [_FEATURE_EFFECTS, USER_PROVIDED_EFFECTS]\n      }]\n    };\n  }\n  static forRoot(...rootEffects) {\n    const effects = rootEffects.flat();\n    const effectsClasses = getClasses(effects);\n    return {\n      ngModule: EffectsRootModule,\n      providers: [effectsClasses, {\n        provide: _ROOT_EFFECTS,\n        useValue: [effects]\n      }, {\n        provide: _ROOT_EFFECTS_GUARD,\n        useFactory: _provideForRootGuard\n      }, {\n        provide: USER_PROVIDED_EFFECTS,\n        multi: true,\n        useValue: []\n      }, {\n        provide: _ROOT_EFFECTS_INSTANCES,\n        useFactory: createEffectsInstances,\n        deps: [_ROOT_EFFECTS, USER_PROVIDED_EFFECTS]\n      }]\n    };\n  }\n}\n/** @nocollapse */\nEffectsModule.ɵfac = function EffectsModule_Factory(t) {\n  return new (t || EffectsModule)();\n};\n/** @nocollapse */\nEffectsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EffectsModule\n});\n/** @nocollapse */\nEffectsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\nfunction createEffectsInstances(effectsGroups, userProvidedEffectsGroups) {\n  const effects = [];\n  for (const effectsGroup of effectsGroups) {\n    effects.push(...effectsGroup);\n  }\n  for (const userProvidedEffectsGroup of userProvidedEffectsGroups) {\n    effects.push(...userProvidedEffectsGroup);\n  }\n  return effects.map(effectsClassOrRecord => isClass(effectsClassOrRecord) ? inject(effectsClassOrRecord) : effectsClassOrRecord);\n}\nfunction _provideForRootGuard() {\n  const runner = inject(EffectsRunner, {\n    optional: true,\n    skipSelf: true\n  });\n  const rootEffects = inject(_ROOT_EFFECTS, {\n    self: true\n  });\n  // check whether any effects are actually passed\n  const hasEffects = !(rootEffects.length === 1 && rootEffects[0].length === 0);\n  if (hasEffects && runner) {\n    throw new TypeError(`EffectsModule.forRoot() called twice. Feature modules should use EffectsModule.forFeature() instead.`);\n  }\n  return 'guarded';\n}\n\n/**\n * Wraps project fn with error handling making it safe to use in Effects.\n * Takes either a config with named properties that represent different possible\n * callbacks or project/error callbacks that are required.\n */\nfunction act( /** Allow to take either config object or project/error functions */\nconfigOrProject, errorFn) {\n  const {\n    project,\n    error,\n    complete,\n    operator,\n    unsubscribe\n  } = typeof configOrProject === 'function' ? {\n    project: configOrProject,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    error: errorFn,\n    operator: concatMap,\n    complete: undefined,\n    unsubscribe: undefined\n  } : {\n    ...configOrProject,\n    operator: configOrProject.operator || concatMap\n  };\n  return source => defer(() => {\n    const subject = new Subject();\n    return merge(source.pipe(operator((input, index) => defer(() => {\n      let completed = false;\n      let errored = false;\n      let projectedCount = 0;\n      return project(input, index).pipe(materialize(), map(notification => {\n        switch (notification.kind) {\n          case 'E':\n            errored = true;\n            return {\n              kind: 'N',\n              value: error(notification.error, input)\n            };\n          case 'C':\n            completed = true;\n            return complete ? {\n              kind: 'N',\n              value: complete(projectedCount, input)\n            } : undefined;\n          default:\n            ++projectedCount;\n            return notification;\n        }\n      }), filter(n => n != null), dematerialize(), finalize(() => {\n        if (!completed && !errored && unsubscribe) {\n          subject.next(unsubscribe(projectedCount, input));\n        }\n      }));\n    }))), subject);\n  });\n}\n\n/**\n * `concatLatestFrom` combines the source value\n * and the last available value from a lazily evaluated Observable\n * in a new array\n *\n * @usageNotes\n *\n * Select the active customer from the NgRx Store\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * as fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom(() => this.store.select(fromCustomers.selectActiveCustomer))\n * )\n * ```\n *\n * Select a customer from the NgRx Store by its id that is available on the action\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom((action) => this.store.select(fromCustomers.selectCustomer(action.customerId)))\n * )\n * ```\n */\nfunction concatLatestFrom(observablesFactory) {\n  return pipe(concatMap(value => {\n    const observables = observablesFactory(value);\n    const observablesAsArray = Array.isArray(observables) ? observables : [observables];\n    return of(value).pipe(withLatestFrom(...observablesAsArray));\n  }));\n}\n\n/**\n * @usageNotes\n *\n * ### Providing effects at the root level\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideEffects(RouterEffects)],\n * });\n * ```\n *\n * ### Providing effects at the feature level\n *\n * ```ts\n * const booksRoutes: Route[] = [\n *   {\n *     path: '',\n *     providers: [provideEffects(BooksApiEffects)],\n *     children: [\n *       { path: '', component: BookListComponent },\n *       { path: ':id', component: BookDetailsComponent },\n *     ],\n *   },\n * ];\n * ```\n */\nfunction provideEffects(...effects) {\n  const effectsClassesAndRecords = effects.flat();\n  const effectsClasses = getClasses(effectsClassesAndRecords);\n  return makeEnvironmentProviders([effectsClasses, {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useValue: () => {\n      inject(ROOT_STORE_PROVIDER);\n      inject(FEATURE_STATE_PROVIDER, {\n        optional: true\n      });\n      const effectsRunner = inject(EffectsRunner);\n      const effectSources = inject(EffectSources);\n      const shouldInitEffects = !effectsRunner.isStarted;\n      if (shouldInitEffects) {\n        effectsRunner.start();\n      }\n      for (const effectsClassOrRecord of effectsClassesAndRecords) {\n        const effectsInstance = isClass(effectsClassOrRecord) ? inject(effectsClassOrRecord) : effectsClassOrRecord;\n        effectSources.addEffects(effectsInstance);\n      }\n      if (shouldInitEffects) {\n        const store = inject(Store);\n        store.dispatch(rootEffectsInit());\n      }\n    }\n  }]);\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Actions, EFFECTS_ERROR_HANDLER, EffectSources, EffectsFeatureModule, EffectsModule, EffectsRootModule, EffectsRunner, ROOT_EFFECTS_INIT, USER_PROVIDED_EFFECTS, act, concatLatestFrom, createEffect, defaultEffectsErrorHandler, getEffectsMetadata, mergeEffects, ofType, provideEffects, rootEffectsInit };\n//# sourceMappingURL=ngrx-effects.mjs.map","map":{"version":3,"names":["i1","merge","Observable","Subject","defer","pipe","of","ignoreElements","materialize","map","catchError","filter","groupBy","mergeMap","exhaustMap","dematerialize","take","concatMap","finalize","withLatestFrom","i0","Injectable","Inject","InjectionToken","NgModule","Optional","inject","makeEnvironmentProviders","ENVIRONMENT_INITIALIZER","i3","ScannedActionsSubject","createAction","ROOT_STORE_PROVIDER","FEATURE_STATE_PROVIDER","Store","DEFAULT_EFFECT_CONFIG","dispatch","functional","useEffectsErrorHandler","CREATE_EFFECT_METADATA_KEY","createEffect","source","config","effect","value","Object","defineProperty","getCreateEffectMetadata","instance","propertyNames","getOwnPropertyNames","metadata","propertyName","hasOwnProperty","property","metaData","getEffectsMetadata","getSourceMetadata","reduce","acc","getSourceForInstance","getPrototypeOf","isClassInstance","obj","constructor","name","isClass","classOrRecord","getClasses","classesAndRecords","mergeEffects","sourceInstance","globalErrorHandler","effectsErrorHandler","sourceName","observables$","observable$","effectAction$","materialized$","notification","MAX_NUMBER_OF_RETRY_ATTEMPTS","defaultEffectsErrorHandler","errorHandler","retryAttemptLeft","error","handleError","Actions","lift","operator","observable","ɵfac","ɵprov","type","args","providedIn","decorators","ofType","allowedTypes","action","some","typeOrActionCreator","_ROOT_EFFECTS_GUARD","USER_PROVIDED_EFFECTS","_ROOT_EFFECTS","_ROOT_EFFECTS_INSTANCES","_FEATURE_EFFECTS","_FEATURE_EFFECTS_INSTANCE_GROUPS","EFFECTS_ERROR_HANDLER","factory","ROOT_EFFECTS_INIT","rootEffectsInit","reportInvalidActions","output","reporter","kind","isInvalidAction","isAction","Error","getEffectName","stringify","isMethod","String","JSON","onIdentifyEffectsKey","isOnIdentifyEffects","isFunction","onRunEffectsKey","isOnRunEffects","onInitEffects","isOnInitEffects","functionName","EffectSources","addEffects","effectSourceInstance","next","toActions","effectsInstance","source$","effect$","resolveEffectSource","init$","ngrxOnInitEffects","ErrorHandler","undefined","ngrxOnIdentifyEffects","mergedEffects$","ngrxOnRunEffects","EffectsRunner","effectSources","store","effectsSubscription","isStarted","start","subscribe","ngOnDestroy","unsubscribe","EffectsRootModule","sources","runner","rootEffectsInstances","storeRootModule","storeFeatureModule","guard","StoreRootModule","StoreFeatureModule","ɵmod","ɵinj","EffectsFeatureModule","effectsRootModule","effectsInstanceGroups","effectsInstances","flat","EffectsModule","forFeature","featureEffects","effects","effectsClasses","ngModule","providers","provide","multi","useValue","useFactory","createEffectsInstances","deps","forRoot","rootEffects","_provideForRootGuard","effectsGroups","userProvidedEffectsGroups","effectsGroup","push","userProvidedEffectsGroup","effectsClassOrRecord","optional","skipSelf","self","hasEffects","length","TypeError","act","configOrProject","errorFn","project","complete","subject","input","index","completed","errored","projectedCount","n","concatLatestFrom","observablesFactory","observables","observablesAsArray","Array","isArray","provideEffects","effectsClassesAndRecords","effectsRunner","shouldInitEffects"],"sources":["C:/Work/Assignment/ngx-Demo/node_modules/@ngrx/effects/fesm2020/ngrx-effects.mjs"],"sourcesContent":["import * as i1 from 'rxjs';\nimport { merge, Observable, Subject, defer, pipe, of } from 'rxjs';\nimport { ignoreElements, materialize, map, catchError, filter, groupBy, mergeMap, exhaustMap, dematerialize, take, concatMap, finalize, withLatestFrom } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, NgModule, Optional, inject, makeEnvironmentProviders, ENVIRONMENT_INITIALIZER } from '@angular/core';\nimport * as i3 from '@ngrx/store';\nimport { ScannedActionsSubject, createAction, ROOT_STORE_PROVIDER, FEATURE_STATE_PROVIDER, Store } from '@ngrx/store';\n\nconst DEFAULT_EFFECT_CONFIG = {\n    dispatch: true,\n    functional: false,\n    useEffectsErrorHandler: true,\n};\nconst CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n\n/**\n * @description\n *\n * Creates an effect from a source and an `EffectConfig`.\n *\n * @param source A function which returns an observable or observable factory.\n * @param config A `EffectConfig` to configure the effect. By default,\n * `dispatch` is true, `functional` is false, and `useEffectsErrorHandler` is\n * true.\n * @returns If `EffectConfig`#`functional` is true, returns the source function.\n * Else, returns the source function result. When `EffectConfig`#`dispatch` is\n * true, the source function result needs to be `Observable<Action>`.\n *\n * @usageNotes\n *\n * ### Class Effects\n *\n * ```ts\n * @Injectable()\n * export class FeatureEffects {\n *   // mapping to a different action\n *   readonly effect1$ = createEffect(\n *     () => this.actions$.pipe(\n *       ofType(FeatureActions.actionOne),\n *       map(() => FeatureActions.actionTwo())\n *     )\n *   );\n *\n *   // non-dispatching effect\n *   readonly effect2$ = createEffect(\n *     () => this.actions$.pipe(\n *       ofType(FeatureActions.actionTwo),\n *       tap(() => console.log('Action Two Dispatched'))\n *     ),\n *     { dispatch: false } // FeatureActions.actionTwo is not dispatched\n *   );\n *\n *   constructor(private readonly actions$: Actions) {}\n * }\n * ```\n *\n * ### Functional Effects\n *\n * ```ts\n * // mapping to a different action\n * export const loadUsers = createEffect(\n *   (actions$ = inject(Actions), usersService = inject(UsersService)) => {\n *     return actions$.pipe(\n *       ofType(UsersPageActions.opened),\n *       exhaustMap(() => {\n *         return usersService.getAll().pipe(\n *           map((users) => UsersApiActions.usersLoadedSuccess({ users })),\n *           catchError((error) =>\n *             of(UsersApiActions.usersLoadedFailure({ error }))\n *           )\n *         );\n *       })\n *     );\n *   },\n *   { functional: true }\n * );\n *\n * // non-dispatching functional effect\n * export const logDispatchedActions = createEffect(\n *   () => inject(Actions).pipe(tap(console.log)),\n *   { functional: true, dispatch: false }\n * );\n * ```\n */\nfunction createEffect(source, config = {}) {\n    const effect = config.functional ? source : source();\n    const value = {\n        ...DEFAULT_EFFECT_CONFIG,\n        ...config, // Overrides any defaults if values are provided\n    };\n    Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n        value,\n    });\n    return effect;\n}\nfunction getCreateEffectMetadata(instance) {\n    const propertyNames = Object.getOwnPropertyNames(instance);\n    const metadata = propertyNames\n        .filter((propertyName) => {\n        if (instance[propertyName] &&\n            instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY)) {\n            // If the property type has overridden `hasOwnProperty` we need to ensure\n            // that the metadata is valid (containing a `dispatch` property)\n            // https://github.com/ngrx/platform/issues/2975\n            const property = instance[propertyName];\n            return property[CREATE_EFFECT_METADATA_KEY].hasOwnProperty('dispatch');\n        }\n        return false;\n    })\n        .map((propertyName) => {\n        const metaData = instance[propertyName][CREATE_EFFECT_METADATA_KEY];\n        return {\n            propertyName,\n            ...metaData,\n        };\n    });\n    return metadata;\n}\n\nfunction getEffectsMetadata(instance) {\n    return getSourceMetadata(instance).reduce((acc, { propertyName, dispatch, useEffectsErrorHandler }) => {\n        acc[propertyName] = { dispatch, useEffectsErrorHandler };\n        return acc;\n    }, {});\n}\nfunction getSourceMetadata(instance) {\n    return getCreateEffectMetadata(instance);\n}\n\nfunction getSourceForInstance(instance) {\n    return Object.getPrototypeOf(instance);\n}\nfunction isClassInstance(obj) {\n    return (obj.constructor.name !== 'Object' && obj.constructor.name !== 'Function');\n}\nfunction isClass(classOrRecord) {\n    return typeof classOrRecord === 'function';\n}\nfunction getClasses(classesAndRecords) {\n    return classesAndRecords.filter(isClass);\n}\n\nfunction mergeEffects(sourceInstance, globalErrorHandler, effectsErrorHandler) {\n    const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n    const observables$ = getSourceMetadata(sourceInstance).map(({ propertyName, dispatch, useEffectsErrorHandler, }) => {\n        const observable$ = typeof sourceInstance[propertyName] === 'function'\n            ? sourceInstance[propertyName]()\n            : sourceInstance[propertyName];\n        const effectAction$ = useEffectsErrorHandler\n            ? effectsErrorHandler(observable$, globalErrorHandler)\n            : observable$;\n        if (dispatch === false) {\n            return effectAction$.pipe(ignoreElements());\n        }\n        const materialized$ = effectAction$.pipe(materialize());\n        return materialized$.pipe(map((notification) => ({\n            effect: sourceInstance[propertyName],\n            notification,\n            propertyName,\n            sourceName,\n            sourceInstance,\n        })));\n    });\n    return merge(...observables$);\n}\n\nconst MAX_NUMBER_OF_RETRY_ATTEMPTS = 10;\nfunction defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft = MAX_NUMBER_OF_RETRY_ATTEMPTS) {\n    return observable$.pipe(catchError((error) => {\n        if (errorHandler)\n            errorHandler.handleError(error);\n        if (retryAttemptLeft <= 1) {\n            return observable$; // last attempt\n        }\n        // Return observable that produces this particular effect\n        return defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft - 1);\n    }));\n}\n\nclass Actions extends Observable {\n    constructor(source) {\n        super();\n        if (source) {\n            this.source = source;\n        }\n    }\n    lift(operator) {\n        const observable = new Actions();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n}\n/** @nocollapse */ Actions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Actions, deps: [{ token: ScannedActionsSubject }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ Actions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Actions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Actions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{\n                    type: Inject,\n                    args: [ScannedActionsSubject]\n                }] }]; } });\n/**\n * `ofType` filters an Observable of `Actions` into an Observable of the actions\n * whose type strings are passed to it.\n *\n * For example, if `actions` has type `Actions<AdditionAction|SubstractionAction>`, and\n * the type of the `Addition` action is `add`, then\n * `actions.pipe(ofType('add'))` returns an `Observable<AdditionAction>`.\n *\n * Properly typing this function is hard and requires some advanced TS tricks\n * below.\n *\n * Type narrowing automatically works, as long as your `actions` object\n * starts with a `Actions<SomeUnionOfActions>` instead of generic `Actions`.\n *\n * For backwards compatibility, when one passes a single type argument\n * `ofType<T>('something')` the result is an `Observable<T>`. Note, that `T`\n * completely overrides any possible inference from 'something'.\n *\n * Unfortunately, for unknown 'actions: Actions' these types will produce\n * 'Observable<never>'. In such cases one has to manually set the generic type\n * like `actions.ofType<AdditionAction>('add')`.\n *\n * @usageNotes\n *\n * Filter the Actions stream on the \"customers page loaded\" action\n *\n * ```ts\n * import { ofType } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  ofType(fromCustomers.pageLoaded)\n * )\n * ```\n */\nfunction ofType(...allowedTypes) {\n    return filter((action) => allowedTypes.some((typeOrActionCreator) => {\n        if (typeof typeOrActionCreator === 'string') {\n            // Comparing the string to type\n            return typeOrActionCreator === action.type;\n        }\n        // We are filtering by ActionCreator\n        return typeOrActionCreator.type === action.type;\n    }));\n}\n\nconst _ROOT_EFFECTS_GUARD = new InjectionToken('@ngrx/effects Internal Root Guard');\nconst USER_PROVIDED_EFFECTS = new InjectionToken('@ngrx/effects User Provided Effects');\nconst _ROOT_EFFECTS = new InjectionToken('@ngrx/effects Internal Root Effects');\nconst _ROOT_EFFECTS_INSTANCES = new InjectionToken('@ngrx/effects Internal Root Effects Instances');\nconst _FEATURE_EFFECTS = new InjectionToken('@ngrx/effects Internal Feature Effects');\nconst _FEATURE_EFFECTS_INSTANCE_GROUPS = new InjectionToken('@ngrx/effects Internal Feature Effects Instance Groups');\nconst EFFECTS_ERROR_HANDLER = new InjectionToken('@ngrx/effects Effects Error Handler', { providedIn: 'root', factory: () => defaultEffectsErrorHandler });\n\nconst ROOT_EFFECTS_INIT = '@ngrx/effects/init';\nconst rootEffectsInit = createAction(ROOT_EFFECTS_INIT);\n\nfunction reportInvalidActions(output, reporter) {\n    if (output.notification.kind === 'N') {\n        const action = output.notification.value;\n        const isInvalidAction = !isAction(action);\n        if (isInvalidAction) {\n            reporter.handleError(new Error(`Effect ${getEffectName(output)} dispatched an invalid action: ${stringify(action)}`));\n        }\n    }\n}\nfunction isAction(action) {\n    return (typeof action !== 'function' &&\n        action &&\n        action.type &&\n        typeof action.type === 'string');\n}\nfunction getEffectName({ propertyName, sourceInstance, sourceName, }) {\n    const isMethod = typeof sourceInstance[propertyName] === 'function';\n    return `\"${sourceName}.${String(propertyName)}${isMethod ? '()' : ''}\"`;\n}\nfunction stringify(action) {\n    try {\n        return JSON.stringify(action);\n    }\n    catch {\n        return action;\n    }\n}\n\nconst onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';\nfunction isOnIdentifyEffects(instance) {\n    return isFunction(instance, onIdentifyEffectsKey);\n}\nconst onRunEffectsKey = 'ngrxOnRunEffects';\nfunction isOnRunEffects(instance) {\n    return isFunction(instance, onRunEffectsKey);\n}\nconst onInitEffects = 'ngrxOnInitEffects';\nfunction isOnInitEffects(instance) {\n    return isFunction(instance, onInitEffects);\n}\nfunction isFunction(instance, functionName) {\n    return (instance &&\n        functionName in instance &&\n        typeof instance[functionName] === 'function');\n}\n\nclass EffectSources extends Subject {\n    constructor(errorHandler, effectsErrorHandler) {\n        super();\n        this.errorHandler = errorHandler;\n        this.effectsErrorHandler = effectsErrorHandler;\n    }\n    addEffects(effectSourceInstance) {\n        this.next(effectSourceInstance);\n    }\n    /**\n     * @internal\n     */\n    toActions() {\n        return this.pipe(groupBy((effectsInstance) => isClassInstance(effectsInstance)\n            ? getSourceForInstance(effectsInstance)\n            : effectsInstance), mergeMap((source$) => {\n            return source$.pipe(groupBy(effectsInstance));\n        }), mergeMap((source$) => {\n            const effect$ = source$.pipe(exhaustMap((sourceInstance) => {\n                return resolveEffectSource(this.errorHandler, this.effectsErrorHandler)(sourceInstance);\n            }), map((output) => {\n                reportInvalidActions(output, this.errorHandler);\n                return output.notification;\n            }), filter((notification) => notification.kind === 'N' && notification.value != null), dematerialize());\n            // start the stream with an INIT action\n            // do this only for the first Effect instance\n            const init$ = source$.pipe(take(1), filter(isOnInitEffects), map((instance) => instance.ngrxOnInitEffects()));\n            return merge(effect$, init$);\n        }));\n    }\n}\n/** @nocollapse */ EffectSources.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectSources, deps: [{ token: i0.ErrorHandler }, { token: EFFECTS_ERROR_HANDLER }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ EffectSources.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectSources, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectSources, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [EFFECTS_ERROR_HANDLER]\n                }] }]; } });\nfunction effectsInstance(sourceInstance) {\n    if (isOnIdentifyEffects(sourceInstance)) {\n        return sourceInstance.ngrxOnIdentifyEffects();\n    }\n    return '';\n}\nfunction resolveEffectSource(errorHandler, effectsErrorHandler) {\n    return (sourceInstance) => {\n        const mergedEffects$ = mergeEffects(sourceInstance, errorHandler, effectsErrorHandler);\n        if (isOnRunEffects(sourceInstance)) {\n            return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n        }\n        return mergedEffects$;\n    };\n}\n\nclass EffectsRunner {\n    constructor(effectSources, store) {\n        this.effectSources = effectSources;\n        this.store = store;\n        this.effectsSubscription = null;\n    }\n    get isStarted() {\n        return !!this.effectsSubscription;\n    }\n    start() {\n        if (!this.effectsSubscription) {\n            this.effectsSubscription = this.effectSources\n                .toActions()\n                .subscribe(this.store);\n        }\n    }\n    ngOnDestroy() {\n        if (this.effectsSubscription) {\n            this.effectsSubscription.unsubscribe();\n            this.effectsSubscription = null;\n        }\n    }\n}\n/** @nocollapse */ EffectsRunner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsRunner, deps: [{ token: EffectSources }, { token: i3.Store }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ EffectsRunner.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsRunner, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsRunner, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: EffectSources }, { type: i3.Store }]; } });\n\nclass EffectsRootModule {\n    constructor(sources, runner, store, rootEffectsInstances, storeRootModule, storeFeatureModule, guard) {\n        this.sources = sources;\n        runner.start();\n        for (const effectsInstance of rootEffectsInstances) {\n            sources.addEffects(effectsInstance);\n        }\n        store.dispatch({ type: ROOT_EFFECTS_INIT });\n    }\n    addEffects(effectsInstance) {\n        this.sources.addEffects(effectsInstance);\n    }\n}\n/** @nocollapse */ EffectsRootModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsRootModule, deps: [{ token: EffectSources }, { token: EffectsRunner }, { token: i3.Store }, { token: _ROOT_EFFECTS_INSTANCES }, { token: i3.StoreRootModule, optional: true }, { token: i3.StoreFeatureModule, optional: true }, { token: _ROOT_EFFECTS_GUARD, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ EffectsRootModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsRootModule });\n/** @nocollapse */ EffectsRootModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsRootModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsRootModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () { return [{ type: EffectSources }, { type: EffectsRunner }, { type: i3.Store }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [_ROOT_EFFECTS_INSTANCES]\n                }] }, { type: i3.StoreRootModule, decorators: [{\n                    type: Optional\n                }] }, { type: i3.StoreFeatureModule, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [_ROOT_EFFECTS_GUARD]\n                }] }]; } });\n\nclass EffectsFeatureModule {\n    constructor(effectsRootModule, effectsInstanceGroups, storeRootModule, storeFeatureModule) {\n        const effectsInstances = effectsInstanceGroups.flat();\n        for (const effectsInstance of effectsInstances) {\n            effectsRootModule.addEffects(effectsInstance);\n        }\n    }\n}\n/** @nocollapse */ EffectsFeatureModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsFeatureModule, deps: [{ token: EffectsRootModule }, { token: _FEATURE_EFFECTS_INSTANCE_GROUPS }, { token: i3.StoreRootModule, optional: true }, { token: i3.StoreFeatureModule, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ EffectsFeatureModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsFeatureModule });\n/** @nocollapse */ EffectsFeatureModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsFeatureModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsFeatureModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () { return [{ type: EffectsRootModule }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [_FEATURE_EFFECTS_INSTANCE_GROUPS]\n                }] }, { type: i3.StoreRootModule, decorators: [{\n                    type: Optional\n                }] }, { type: i3.StoreFeatureModule, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nclass EffectsModule {\n    static forFeature(...featureEffects) {\n        const effects = featureEffects.flat();\n        const effectsClasses = getClasses(effects);\n        return {\n            ngModule: EffectsFeatureModule,\n            providers: [\n                effectsClasses,\n                {\n                    provide: _FEATURE_EFFECTS,\n                    multi: true,\n                    useValue: effects,\n                },\n                {\n                    provide: USER_PROVIDED_EFFECTS,\n                    multi: true,\n                    useValue: [],\n                },\n                {\n                    provide: _FEATURE_EFFECTS_INSTANCE_GROUPS,\n                    multi: true,\n                    useFactory: createEffectsInstances,\n                    deps: [_FEATURE_EFFECTS, USER_PROVIDED_EFFECTS],\n                },\n            ],\n        };\n    }\n    static forRoot(...rootEffects) {\n        const effects = rootEffects.flat();\n        const effectsClasses = getClasses(effects);\n        return {\n            ngModule: EffectsRootModule,\n            providers: [\n                effectsClasses,\n                {\n                    provide: _ROOT_EFFECTS,\n                    useValue: [effects],\n                },\n                {\n                    provide: _ROOT_EFFECTS_GUARD,\n                    useFactory: _provideForRootGuard,\n                },\n                {\n                    provide: USER_PROVIDED_EFFECTS,\n                    multi: true,\n                    useValue: [],\n                },\n                {\n                    provide: _ROOT_EFFECTS_INSTANCES,\n                    useFactory: createEffectsInstances,\n                    deps: [_ROOT_EFFECTS, USER_PROVIDED_EFFECTS],\n                },\n            ],\n        };\n    }\n}\n/** @nocollapse */ EffectsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ EffectsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsModule });\n/** @nocollapse */ EffectsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: EffectsModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\nfunction createEffectsInstances(effectsGroups, userProvidedEffectsGroups) {\n    const effects = [];\n    for (const effectsGroup of effectsGroups) {\n        effects.push(...effectsGroup);\n    }\n    for (const userProvidedEffectsGroup of userProvidedEffectsGroups) {\n        effects.push(...userProvidedEffectsGroup);\n    }\n    return effects.map((effectsClassOrRecord) => isClass(effectsClassOrRecord)\n        ? inject(effectsClassOrRecord)\n        : effectsClassOrRecord);\n}\nfunction _provideForRootGuard() {\n    const runner = inject(EffectsRunner, { optional: true, skipSelf: true });\n    const rootEffects = inject(_ROOT_EFFECTS, { self: true });\n    // check whether any effects are actually passed\n    const hasEffects = !(rootEffects.length === 1 && rootEffects[0].length === 0);\n    if (hasEffects && runner) {\n        throw new TypeError(`EffectsModule.forRoot() called twice. Feature modules should use EffectsModule.forFeature() instead.`);\n    }\n    return 'guarded';\n}\n\n/**\n * Wraps project fn with error handling making it safe to use in Effects.\n * Takes either a config with named properties that represent different possible\n * callbacks or project/error callbacks that are required.\n */\nfunction act(\n/** Allow to take either config object or project/error functions */\nconfigOrProject, errorFn) {\n    const { project, error, complete, operator, unsubscribe } = typeof configOrProject === 'function'\n        ? {\n            project: configOrProject,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            error: errorFn,\n            operator: concatMap,\n            complete: undefined,\n            unsubscribe: undefined,\n        }\n        : { ...configOrProject, operator: configOrProject.operator || concatMap };\n    return (source) => defer(() => {\n        const subject = new Subject();\n        return merge(source.pipe(operator((input, index) => defer(() => {\n            let completed = false;\n            let errored = false;\n            let projectedCount = 0;\n            return project(input, index).pipe(materialize(), map((notification) => {\n                switch (notification.kind) {\n                    case 'E':\n                        errored = true;\n                        return {\n                            kind: 'N',\n                            value: error(notification.error, input),\n                        };\n                    case 'C':\n                        completed = true;\n                        return complete\n                            ? {\n                                kind: 'N',\n                                value: complete(projectedCount, input),\n                            }\n                            : undefined;\n                    default:\n                        ++projectedCount;\n                        return notification;\n                }\n            }), filter((n) => n != null), dematerialize(), finalize(() => {\n                if (!completed && !errored && unsubscribe) {\n                    subject.next(unsubscribe(projectedCount, input));\n                }\n            }));\n        }))), subject);\n    });\n}\n\n/**\n * `concatLatestFrom` combines the source value\n * and the last available value from a lazily evaluated Observable\n * in a new array\n *\n * @usageNotes\n *\n * Select the active customer from the NgRx Store\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * as fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom(() => this.store.select(fromCustomers.selectActiveCustomer))\n * )\n * ```\n *\n * Select a customer from the NgRx Store by its id that is available on the action\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom((action) => this.store.select(fromCustomers.selectCustomer(action.customerId)))\n * )\n * ```\n */\nfunction concatLatestFrom(observablesFactory) {\n    return pipe(concatMap((value) => {\n        const observables = observablesFactory(value);\n        const observablesAsArray = Array.isArray(observables)\n            ? observables\n            : [observables];\n        return of(value).pipe(withLatestFrom(...observablesAsArray));\n    }));\n}\n\n/**\n * @usageNotes\n *\n * ### Providing effects at the root level\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideEffects(RouterEffects)],\n * });\n * ```\n *\n * ### Providing effects at the feature level\n *\n * ```ts\n * const booksRoutes: Route[] = [\n *   {\n *     path: '',\n *     providers: [provideEffects(BooksApiEffects)],\n *     children: [\n *       { path: '', component: BookListComponent },\n *       { path: ':id', component: BookDetailsComponent },\n *     ],\n *   },\n * ];\n * ```\n */\nfunction provideEffects(...effects) {\n    const effectsClassesAndRecords = effects.flat();\n    const effectsClasses = getClasses(effectsClassesAndRecords);\n    return makeEnvironmentProviders([\n        effectsClasses,\n        {\n            provide: ENVIRONMENT_INITIALIZER,\n            multi: true,\n            useValue: () => {\n                inject(ROOT_STORE_PROVIDER);\n                inject(FEATURE_STATE_PROVIDER, { optional: true });\n                const effectsRunner = inject(EffectsRunner);\n                const effectSources = inject(EffectSources);\n                const shouldInitEffects = !effectsRunner.isStarted;\n                if (shouldInitEffects) {\n                    effectsRunner.start();\n                }\n                for (const effectsClassOrRecord of effectsClassesAndRecords) {\n                    const effectsInstance = isClass(effectsClassOrRecord)\n                        ? inject(effectsClassOrRecord)\n                        : effectsClassOrRecord;\n                    effectSources.addEffects(effectsInstance);\n                }\n                if (shouldInitEffects) {\n                    const store = inject(Store);\n                    store.dispatch(rootEffectsInit());\n                }\n            },\n        },\n    ]);\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Actions, EFFECTS_ERROR_HANDLER, EffectSources, EffectsFeatureModule, EffectsModule, EffectsRootModule, EffectsRunner, ROOT_EFFECTS_INIT, USER_PROVIDED_EFFECTS, act, concatLatestFrom, createEffect, defaultEffectsErrorHandler, getEffectsMetadata, mergeEffects, ofType, provideEffects, rootEffectsInit };\n//# sourceMappingURL=ngrx-effects.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}